// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api_v2.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	API_GetUser_FullMethodName                 = "/protobuf.API/getUser"
	API_GetUserCourses_FullMethodName          = "/protobuf.API/getUserCourses"
	API_GetUserPinned_FullMethodName           = "/protobuf.API/getUserPinned"
	API_GetUserAdminCourses_FullMethodName     = "/protobuf.API/getUserAdminCourses"
	API_GetUserSettings_FullMethodName         = "/protobuf.API/getUserSettings"
	API_PatchUserSettings_FullMethodName       = "/protobuf.API/patchUserSettings"
	API_GetUserBookmarks_FullMethodName        = "/protobuf.API/getUserBookmarks"
	API_PostUserPinned_FullMethodName          = "/protobuf.API/postUserPinned"
	API_PutUserBookmark_FullMethodName         = "/protobuf.API/putUserBookmark"
	API_PatchUserBookmark_FullMethodName       = "/protobuf.API/patchUserBookmark"
	API_DeleteUserBookmark_FullMethodName      = "/protobuf.API/deleteUserBookmark"
	API_DeleteUserPinned_FullMethodName        = "/protobuf.API/deleteUserPinned"
	API_GetBannerAlerts_FullMethodName         = "/protobuf.API/getBannerAlerts"
	API_GetFeatureNotifications_FullMethodName = "/protobuf.API/getFeatureNotifications"
	API_PostDeviceToken_FullMethodName         = "/protobuf.API/postDeviceToken"
	API_DeleteDeviceToken_FullMethodName       = "/protobuf.API/deleteDeviceToken"
	API_GetPublicCourses_FullMethodName        = "/protobuf.API/getPublicCourses"
	API_GetSemesters_FullMethodName            = "/protobuf.API/getSemesters"
	API_GetCourseStreams_FullMethodName        = "/protobuf.API/getCourseStreams"
	API_GetStream_FullMethodName               = "/protobuf.API/GetStream"
	API_GetNowLive_FullMethodName              = "/protobuf.API/GetNowLive"
	API_GetThumbsVOD_FullMethodName            = "/protobuf.API/getThumbsVOD"
	API_GetThumbsLive_FullMethodName           = "/protobuf.API/getThumbsLive"
)

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	// BEGIN API/V2/USER
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	GetUserCourses(ctx context.Context, in *GetUserCoursesRequest, opts ...grpc.CallOption) (*GetUserCoursesResponse, error)
	GetUserPinned(ctx context.Context, in *GetUserPinnedRequest, opts ...grpc.CallOption) (*GetUserPinnedResponse, error)
	GetUserAdminCourses(ctx context.Context, in *GetUserAdminRequest, opts ...grpc.CallOption) (*GetUserAdminResponse, error)
	GetUserSettings(ctx context.Context, in *GetUserSettingsRequest, opts ...grpc.CallOption) (*GetUserSettingsResponse, error)
	PatchUserSettings(ctx context.Context, in *PatchUserSettingsRequest, opts ...grpc.CallOption) (*PatchUserSettingsResponse, error)
	GetUserBookmarks(ctx context.Context, in *GetBookmarksRequest, opts ...grpc.CallOption) (*GetBookmarksResponse, error)
	PostUserPinned(ctx context.Context, in *PostPinnedRequest, opts ...grpc.CallOption) (*PostPinnedResponse, error)
	PutUserBookmark(ctx context.Context, in *PutBookmarkRequest, opts ...grpc.CallOption) (*PutBookmarkResponse, error)
	PatchUserBookmark(ctx context.Context, in *PatchBookmarkRequest, opts ...grpc.CallOption) (*PatchBookmarkResponse, error)
	DeleteUserBookmark(ctx context.Context, in *DeleteBookmarkRequest, opts ...grpc.CallOption) (*DeleteBookmarkResponse, error)
	DeleteUserPinned(ctx context.Context, in *DeletePinnedRequest, opts ...grpc.CallOption) (*DeletePinnedResponse, error)
	// BEGIN API/V2/NOTIFICATIONS
	GetBannerAlerts(ctx context.Context, in *GetBannerAlertsRequest, opts ...grpc.CallOption) (*GetBannerAlertsResponse, error)
	GetFeatureNotifications(ctx context.Context, in *GetFeatureNotificationsRequest, opts ...grpc.CallOption) (*GetFeatureNotificationsResponse, error)
	PostDeviceToken(ctx context.Context, in *PostDeviceTokenRequest, opts ...grpc.CallOption) (*PostDeviceTokenResponse, error)
	DeleteDeviceToken(ctx context.Context, in *DeleteDeviceTokenRequest, opts ...grpc.CallOption) (*DeleteDeviceTokenResponse, error)
	// BEGIN API/V2/COURSES
	GetPublicCourses(ctx context.Context, in *GetPublicCoursesRequest, opts ...grpc.CallOption) (*GetPublicCoursesResponse, error)
	GetSemesters(ctx context.Context, in *GetSemestersRequest, opts ...grpc.CallOption) (*GetSemestersResponse, error)
	GetCourseStreams(ctx context.Context, in *GetCourseStreamsRequest, opts ...grpc.CallOption) (*GetCourseStreamsResponse, error)
	// START API/V2/STREAMS
	GetStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*GetStreamResponse, error)
	GetNowLive(ctx context.Context, in *GetNowLiveRequest, opts ...grpc.CallOption) (*GetNowLiveResponse, error)
	GetThumbsVOD(ctx context.Context, in *GetThumbsVODRequest, opts ...grpc.CallOption) (*GetThumbsVODResponse, error)
	GetThumbsLive(ctx context.Context, in *GetThumbsLiveRequest, opts ...grpc.CallOption) (*GetThumbsLiveResponse, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, API_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetUserCourses(ctx context.Context, in *GetUserCoursesRequest, opts ...grpc.CallOption) (*GetUserCoursesResponse, error) {
	out := new(GetUserCoursesResponse)
	err := c.cc.Invoke(ctx, API_GetUserCourses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetUserPinned(ctx context.Context, in *GetUserPinnedRequest, opts ...grpc.CallOption) (*GetUserPinnedResponse, error) {
	out := new(GetUserPinnedResponse)
	err := c.cc.Invoke(ctx, API_GetUserPinned_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetUserAdminCourses(ctx context.Context, in *GetUserAdminRequest, opts ...grpc.CallOption) (*GetUserAdminResponse, error) {
	out := new(GetUserAdminResponse)
	err := c.cc.Invoke(ctx, API_GetUserAdminCourses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetUserSettings(ctx context.Context, in *GetUserSettingsRequest, opts ...grpc.CallOption) (*GetUserSettingsResponse, error) {
	out := new(GetUserSettingsResponse)
	err := c.cc.Invoke(ctx, API_GetUserSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) PatchUserSettings(ctx context.Context, in *PatchUserSettingsRequest, opts ...grpc.CallOption) (*PatchUserSettingsResponse, error) {
	out := new(PatchUserSettingsResponse)
	err := c.cc.Invoke(ctx, API_PatchUserSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetUserBookmarks(ctx context.Context, in *GetBookmarksRequest, opts ...grpc.CallOption) (*GetBookmarksResponse, error) {
	out := new(GetBookmarksResponse)
	err := c.cc.Invoke(ctx, API_GetUserBookmarks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) PostUserPinned(ctx context.Context, in *PostPinnedRequest, opts ...grpc.CallOption) (*PostPinnedResponse, error) {
	out := new(PostPinnedResponse)
	err := c.cc.Invoke(ctx, API_PostUserPinned_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) PutUserBookmark(ctx context.Context, in *PutBookmarkRequest, opts ...grpc.CallOption) (*PutBookmarkResponse, error) {
	out := new(PutBookmarkResponse)
	err := c.cc.Invoke(ctx, API_PutUserBookmark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) PatchUserBookmark(ctx context.Context, in *PatchBookmarkRequest, opts ...grpc.CallOption) (*PatchBookmarkResponse, error) {
	out := new(PatchBookmarkResponse)
	err := c.cc.Invoke(ctx, API_PatchUserBookmark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteUserBookmark(ctx context.Context, in *DeleteBookmarkRequest, opts ...grpc.CallOption) (*DeleteBookmarkResponse, error) {
	out := new(DeleteBookmarkResponse)
	err := c.cc.Invoke(ctx, API_DeleteUserBookmark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteUserPinned(ctx context.Context, in *DeletePinnedRequest, opts ...grpc.CallOption) (*DeletePinnedResponse, error) {
	out := new(DeletePinnedResponse)
	err := c.cc.Invoke(ctx, API_DeleteUserPinned_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetBannerAlerts(ctx context.Context, in *GetBannerAlertsRequest, opts ...grpc.CallOption) (*GetBannerAlertsResponse, error) {
	out := new(GetBannerAlertsResponse)
	err := c.cc.Invoke(ctx, API_GetBannerAlerts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetFeatureNotifications(ctx context.Context, in *GetFeatureNotificationsRequest, opts ...grpc.CallOption) (*GetFeatureNotificationsResponse, error) {
	out := new(GetFeatureNotificationsResponse)
	err := c.cc.Invoke(ctx, API_GetFeatureNotifications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) PostDeviceToken(ctx context.Context, in *PostDeviceTokenRequest, opts ...grpc.CallOption) (*PostDeviceTokenResponse, error) {
	out := new(PostDeviceTokenResponse)
	err := c.cc.Invoke(ctx, API_PostDeviceToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteDeviceToken(ctx context.Context, in *DeleteDeviceTokenRequest, opts ...grpc.CallOption) (*DeleteDeviceTokenResponse, error) {
	out := new(DeleteDeviceTokenResponse)
	err := c.cc.Invoke(ctx, API_DeleteDeviceToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetPublicCourses(ctx context.Context, in *GetPublicCoursesRequest, opts ...grpc.CallOption) (*GetPublicCoursesResponse, error) {
	out := new(GetPublicCoursesResponse)
	err := c.cc.Invoke(ctx, API_GetPublicCourses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetSemesters(ctx context.Context, in *GetSemestersRequest, opts ...grpc.CallOption) (*GetSemestersResponse, error) {
	out := new(GetSemestersResponse)
	err := c.cc.Invoke(ctx, API_GetSemesters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetCourseStreams(ctx context.Context, in *GetCourseStreamsRequest, opts ...grpc.CallOption) (*GetCourseStreamsResponse, error) {
	out := new(GetCourseStreamsResponse)
	err := c.cc.Invoke(ctx, API_GetCourseStreams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*GetStreamResponse, error) {
	out := new(GetStreamResponse)
	err := c.cc.Invoke(ctx, API_GetStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetNowLive(ctx context.Context, in *GetNowLiveRequest, opts ...grpc.CallOption) (*GetNowLiveResponse, error) {
	out := new(GetNowLiveResponse)
	err := c.cc.Invoke(ctx, API_GetNowLive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetThumbsVOD(ctx context.Context, in *GetThumbsVODRequest, opts ...grpc.CallOption) (*GetThumbsVODResponse, error) {
	out := new(GetThumbsVODResponse)
	err := c.cc.Invoke(ctx, API_GetThumbsVOD_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetThumbsLive(ctx context.Context, in *GetThumbsLiveRequest, opts ...grpc.CallOption) (*GetThumbsLiveResponse, error) {
	out := new(GetThumbsLiveResponse)
	err := c.cc.Invoke(ctx, API_GetThumbsLive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
// All implementations must embed UnimplementedAPIServer
// for forward compatibility
type APIServer interface {
	// BEGIN API/V2/USER
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	GetUserCourses(context.Context, *GetUserCoursesRequest) (*GetUserCoursesResponse, error)
	GetUserPinned(context.Context, *GetUserPinnedRequest) (*GetUserPinnedResponse, error)
	GetUserAdminCourses(context.Context, *GetUserAdminRequest) (*GetUserAdminResponse, error)
	GetUserSettings(context.Context, *GetUserSettingsRequest) (*GetUserSettingsResponse, error)
	PatchUserSettings(context.Context, *PatchUserSettingsRequest) (*PatchUserSettingsResponse, error)
	GetUserBookmarks(context.Context, *GetBookmarksRequest) (*GetBookmarksResponse, error)
	PostUserPinned(context.Context, *PostPinnedRequest) (*PostPinnedResponse, error)
	PutUserBookmark(context.Context, *PutBookmarkRequest) (*PutBookmarkResponse, error)
	PatchUserBookmark(context.Context, *PatchBookmarkRequest) (*PatchBookmarkResponse, error)
	DeleteUserBookmark(context.Context, *DeleteBookmarkRequest) (*DeleteBookmarkResponse, error)
	DeleteUserPinned(context.Context, *DeletePinnedRequest) (*DeletePinnedResponse, error)
	// BEGIN API/V2/NOTIFICATIONS
	GetBannerAlerts(context.Context, *GetBannerAlertsRequest) (*GetBannerAlertsResponse, error)
	GetFeatureNotifications(context.Context, *GetFeatureNotificationsRequest) (*GetFeatureNotificationsResponse, error)
	PostDeviceToken(context.Context, *PostDeviceTokenRequest) (*PostDeviceTokenResponse, error)
	DeleteDeviceToken(context.Context, *DeleteDeviceTokenRequest) (*DeleteDeviceTokenResponse, error)
	// BEGIN API/V2/COURSES
	GetPublicCourses(context.Context, *GetPublicCoursesRequest) (*GetPublicCoursesResponse, error)
	GetSemesters(context.Context, *GetSemestersRequest) (*GetSemestersResponse, error)
	GetCourseStreams(context.Context, *GetCourseStreamsRequest) (*GetCourseStreamsResponse, error)
	// START API/V2/STREAMS
	GetStream(context.Context, *GetStreamRequest) (*GetStreamResponse, error)
	GetNowLive(context.Context, *GetNowLiveRequest) (*GetNowLiveResponse, error)
	GetThumbsVOD(context.Context, *GetThumbsVODRequest) (*GetThumbsVODResponse, error)
	GetThumbsLive(context.Context, *GetThumbsLiveRequest) (*GetThumbsLiveResponse, error)
	mustEmbedUnimplementedAPIServer()
}

// UnimplementedAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (UnimplementedAPIServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAPIServer) GetUserCourses(context.Context, *GetUserCoursesRequest) (*GetUserCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCourses not implemented")
}
func (UnimplementedAPIServer) GetUserPinned(context.Context, *GetUserPinnedRequest) (*GetUserPinnedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPinned not implemented")
}
func (UnimplementedAPIServer) GetUserAdminCourses(context.Context, *GetUserAdminRequest) (*GetUserAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAdminCourses not implemented")
}
func (UnimplementedAPIServer) GetUserSettings(context.Context, *GetUserSettingsRequest) (*GetUserSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSettings not implemented")
}
func (UnimplementedAPIServer) PatchUserSettings(context.Context, *PatchUserSettingsRequest) (*PatchUserSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchUserSettings not implemented")
}
func (UnimplementedAPIServer) GetUserBookmarks(context.Context, *GetBookmarksRequest) (*GetBookmarksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBookmarks not implemented")
}
func (UnimplementedAPIServer) PostUserPinned(context.Context, *PostPinnedRequest) (*PostPinnedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostUserPinned not implemented")
}
func (UnimplementedAPIServer) PutUserBookmark(context.Context, *PutBookmarkRequest) (*PutBookmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserBookmark not implemented")
}
func (UnimplementedAPIServer) PatchUserBookmark(context.Context, *PatchBookmarkRequest) (*PatchBookmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchUserBookmark not implemented")
}
func (UnimplementedAPIServer) DeleteUserBookmark(context.Context, *DeleteBookmarkRequest) (*DeleteBookmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserBookmark not implemented")
}
func (UnimplementedAPIServer) DeleteUserPinned(context.Context, *DeletePinnedRequest) (*DeletePinnedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserPinned not implemented")
}
func (UnimplementedAPIServer) GetBannerAlerts(context.Context, *GetBannerAlertsRequest) (*GetBannerAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBannerAlerts not implemented")
}
func (UnimplementedAPIServer) GetFeatureNotifications(context.Context, *GetFeatureNotificationsRequest) (*GetFeatureNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatureNotifications not implemented")
}
func (UnimplementedAPIServer) PostDeviceToken(context.Context, *PostDeviceTokenRequest) (*PostDeviceTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDeviceToken not implemented")
}
func (UnimplementedAPIServer) DeleteDeviceToken(context.Context, *DeleteDeviceTokenRequest) (*DeleteDeviceTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceToken not implemented")
}
func (UnimplementedAPIServer) GetPublicCourses(context.Context, *GetPublicCoursesRequest) (*GetPublicCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicCourses not implemented")
}
func (UnimplementedAPIServer) GetSemesters(context.Context, *GetSemestersRequest) (*GetSemestersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSemesters not implemented")
}
func (UnimplementedAPIServer) GetCourseStreams(context.Context, *GetCourseStreamsRequest) (*GetCourseStreamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseStreams not implemented")
}
func (UnimplementedAPIServer) GetStream(context.Context, *GetStreamRequest) (*GetStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedAPIServer) GetNowLive(context.Context, *GetNowLiveRequest) (*GetNowLiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNowLive not implemented")
}
func (UnimplementedAPIServer) GetThumbsVOD(context.Context, *GetThumbsVODRequest) (*GetThumbsVODResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThumbsVOD not implemented")
}
func (UnimplementedAPIServer) GetThumbsLive(context.Context, *GetThumbsLiveRequest) (*GetThumbsLiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThumbsLive not implemented")
}
func (UnimplementedAPIServer) mustEmbedUnimplementedAPIServer() {}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetUserCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCoursesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetUserCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_GetUserCourses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetUserCourses(ctx, req.(*GetUserCoursesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetUserPinned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPinnedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetUserPinned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_GetUserPinned_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetUserPinned(ctx, req.(*GetUserPinnedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetUserAdminCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetUserAdminCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_GetUserAdminCourses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetUserAdminCourses(ctx, req.(*GetUserAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetUserSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetUserSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_GetUserSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetUserSettings(ctx, req.(*GetUserSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_PatchUserSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchUserSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).PatchUserSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_PatchUserSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).PatchUserSettings(ctx, req.(*PatchUserSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetUserBookmarks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookmarksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetUserBookmarks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_GetUserBookmarks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetUserBookmarks(ctx, req.(*GetBookmarksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_PostUserPinned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostPinnedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).PostUserPinned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_PostUserPinned_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).PostUserPinned(ctx, req.(*PostPinnedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_PutUserBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutBookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).PutUserBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_PutUserBookmark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).PutUserBookmark(ctx, req.(*PutBookmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_PatchUserBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchBookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).PatchUserBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_PatchUserBookmark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).PatchUserBookmark(ctx, req.(*PatchBookmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteUserBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteUserBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_DeleteUserBookmark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteUserBookmark(ctx, req.(*DeleteBookmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteUserPinned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePinnedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteUserPinned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_DeleteUserPinned_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteUserPinned(ctx, req.(*DeletePinnedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetBannerAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBannerAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetBannerAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_GetBannerAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetBannerAlerts(ctx, req.(*GetBannerAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetFeatureNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetFeatureNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_GetFeatureNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetFeatureNotifications(ctx, req.(*GetFeatureNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_PostDeviceToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDeviceTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).PostDeviceToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_PostDeviceToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).PostDeviceToken(ctx, req.(*PostDeviceTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteDeviceToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteDeviceToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_DeleteDeviceToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteDeviceToken(ctx, req.(*DeleteDeviceTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetPublicCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicCoursesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetPublicCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_GetPublicCourses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetPublicCourses(ctx, req.(*GetPublicCoursesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetSemesters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSemestersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetSemesters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_GetSemesters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetSemesters(ctx, req.(*GetSemestersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetCourseStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseStreamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetCourseStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_GetCourseStreams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetCourseStreams(ctx, req.(*GetCourseStreamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_GetStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetStream(ctx, req.(*GetStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetNowLive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNowLiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetNowLive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_GetNowLive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetNowLive(ctx, req.(*GetNowLiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetThumbsVOD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThumbsVODRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetThumbsVOD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_GetThumbsVOD_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetThumbsVOD(ctx, req.(*GetThumbsVODRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetThumbsLive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThumbsLiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetThumbsLive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_GetThumbsLive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetThumbsLive(ctx, req.(*GetThumbsLiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getUser",
			Handler:    _API_GetUser_Handler,
		},
		{
			MethodName: "getUserCourses",
			Handler:    _API_GetUserCourses_Handler,
		},
		{
			MethodName: "getUserPinned",
			Handler:    _API_GetUserPinned_Handler,
		},
		{
			MethodName: "getUserAdminCourses",
			Handler:    _API_GetUserAdminCourses_Handler,
		},
		{
			MethodName: "getUserSettings",
			Handler:    _API_GetUserSettings_Handler,
		},
		{
			MethodName: "patchUserSettings",
			Handler:    _API_PatchUserSettings_Handler,
		},
		{
			MethodName: "getUserBookmarks",
			Handler:    _API_GetUserBookmarks_Handler,
		},
		{
			MethodName: "postUserPinned",
			Handler:    _API_PostUserPinned_Handler,
		},
		{
			MethodName: "putUserBookmark",
			Handler:    _API_PutUserBookmark_Handler,
		},
		{
			MethodName: "patchUserBookmark",
			Handler:    _API_PatchUserBookmark_Handler,
		},
		{
			MethodName: "deleteUserBookmark",
			Handler:    _API_DeleteUserBookmark_Handler,
		},
		{
			MethodName: "deleteUserPinned",
			Handler:    _API_DeleteUserPinned_Handler,
		},
		{
			MethodName: "getBannerAlerts",
			Handler:    _API_GetBannerAlerts_Handler,
		},
		{
			MethodName: "getFeatureNotifications",
			Handler:    _API_GetFeatureNotifications_Handler,
		},
		{
			MethodName: "postDeviceToken",
			Handler:    _API_PostDeviceToken_Handler,
		},
		{
			MethodName: "deleteDeviceToken",
			Handler:    _API_DeleteDeviceToken_Handler,
		},
		{
			MethodName: "getPublicCourses",
			Handler:    _API_GetPublicCourses_Handler,
		},
		{
			MethodName: "getSemesters",
			Handler:    _API_GetSemesters_Handler,
		},
		{
			MethodName: "getCourseStreams",
			Handler:    _API_GetCourseStreams_Handler,
		},
		{
			MethodName: "GetStream",
			Handler:    _API_GetStream_Handler,
		},
		{
			MethodName: "GetNowLive",
			Handler:    _API_GetNowLive_Handler,
		},
		{
			MethodName: "getThumbsVOD",
			Handler:    _API_GetThumbsVOD_Handler,
		},
		{
			MethodName: "getThumbsLive",
			Handler:    _API_GetThumbsLive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_v2.proto",
}
