// Code generated by MockGen. DO NOT EDIT.
// Source: users.go

// Package mock_dao is a generated GoMock package.
package mock_dao

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/joschahenningsen/TUM-Live/model"
)

// MockUsersDao is a mock of UsersDao interface.
type MockUsersDao struct {
	ctrl     *gomock.Controller
	recorder *MockUsersDaoMockRecorder
}

// MockUsersDaoMockRecorder is the mock recorder for MockUsersDao.
type MockUsersDaoMockRecorder struct {
	mock *MockUsersDao
}

// NewMockUsersDao creates a new mock instance.
func NewMockUsersDao(ctrl *gomock.Controller) *MockUsersDao {
	mock := &MockUsersDao{ctrl: ctrl}
	mock.recorder = &MockUsersDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersDao) EXPECT() *MockUsersDaoMockRecorder {
	return m.recorder
}

// AddUserSetting mocks base method.
func (m *MockUsersDao) AddUserSetting(userSetting *model.UserSetting) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserSetting", userSetting)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserSetting indicates an expected call of AddUserSetting.
func (mr *MockUsersDaoMockRecorder) AddUserSetting(userSetting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserSetting", reflect.TypeOf((*MockUsersDao)(nil).AddUserSetting), userSetting)
}

// AddUsersToCourseByTUMIDs mocks base method.
func (m *MockUsersDao) AddUsersToCourseByTUMIDs(matrNr []string, courseID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUsersToCourseByTUMIDs", matrNr, courseID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUsersToCourseByTUMIDs indicates an expected call of AddUsersToCourseByTUMIDs.
func (mr *MockUsersDaoMockRecorder) AddUsersToCourseByTUMIDs(matrNr, courseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUsersToCourseByTUMIDs", reflect.TypeOf((*MockUsersDao)(nil).AddUsersToCourseByTUMIDs), matrNr, courseID)
}

// AreUsersEmpty mocks base method.
func (m *MockUsersDao) AreUsersEmpty(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AreUsersEmpty", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AreUsersEmpty indicates an expected call of AreUsersEmpty.
func (mr *MockUsersDaoMockRecorder) AreUsersEmpty(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AreUsersEmpty", reflect.TypeOf((*MockUsersDao)(nil).AreUsersEmpty), ctx)
}

// CreateRegisterLink mocks base method.
func (m *MockUsersDao) CreateRegisterLink(ctx context.Context, user model.User) (model.RegisterLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegisterLink", ctx, user)
	ret0, _ := ret[0].(model.RegisterLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegisterLink indicates an expected call of CreateRegisterLink.
func (mr *MockUsersDaoMockRecorder) CreateRegisterLink(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegisterLink", reflect.TypeOf((*MockUsersDao)(nil).CreateRegisterLink), ctx, user)
}

// CreateUser mocks base method.
func (m *MockUsersDao) CreateUser(ctx context.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsersDaoMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsersDao)(nil).CreateUser), ctx, user)
}

// DeleteResetKey mocks base method.
func (m *MockUsersDao) DeleteResetKey(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteResetKey", key)
}

// DeleteResetKey indicates an expected call of DeleteResetKey.
func (mr *MockUsersDaoMockRecorder) DeleteResetKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResetKey", reflect.TypeOf((*MockUsersDao)(nil).DeleteResetKey), key)
}

// DeleteUser mocks base method.
func (m *MockUsersDao) DeleteUser(ctx context.Context, uid uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUsersDaoMockRecorder) DeleteUser(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUsersDao)(nil).DeleteUser), ctx, uid)
}

// GetAllAdminsAndLecturers mocks base method.
func (m *MockUsersDao) GetAllAdminsAndLecturers(users *[]model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAdminsAndLecturers", users)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAllAdminsAndLecturers indicates an expected call of GetAllAdminsAndLecturers.
func (mr *MockUsersDaoMockRecorder) GetAllAdminsAndLecturers(users interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAdminsAndLecturers", reflect.TypeOf((*MockUsersDao)(nil).GetAllAdminsAndLecturers), users)
}

// GetUserByEmail mocks base method.
func (m *MockUsersDao) GetUserByEmail(ctx context.Context, email string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUsersDaoMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUsersDao)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockUsersDao) GetUserByID(ctx context.Context, id uint) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUsersDaoMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUsersDao)(nil).GetUserByID), ctx, id)
}

// GetUserByResetKey mocks base method.
func (m *MockUsersDao) GetUserByResetKey(key string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByResetKey", key)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByResetKey indicates an expected call of GetUserByResetKey.
func (mr *MockUsersDaoMockRecorder) GetUserByResetKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByResetKey", reflect.TypeOf((*MockUsersDao)(nil).GetUserByResetKey), key)
}

// IsUserAdmin mocks base method.
func (m *MockUsersDao) IsUserAdmin(ctx context.Context, uid uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserAdmin", ctx, uid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserAdmin indicates an expected call of IsUserAdmin.
func (mr *MockUsersDaoMockRecorder) IsUserAdmin(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserAdmin", reflect.TypeOf((*MockUsersDao)(nil).IsUserAdmin), ctx, uid)
}

// SearchUser mocks base method.
func (m *MockUsersDao) SearchUser(query string) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUser", query)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUser indicates an expected call of SearchUser.
func (mr *MockUsersDaoMockRecorder) SearchUser(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUser", reflect.TypeOf((*MockUsersDao)(nil).SearchUser), query)
}

// UpdateUser mocks base method.
func (m *MockUsersDao) UpdateUser(user model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUsersDaoMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUsersDao)(nil).UpdateUser), user)
}

// UpsertUser mocks base method.
func (m *MockUsersDao) UpsertUser(user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertUser indicates an expected call of UpsertUser.
func (mr *MockUsersDaoMockRecorder) UpsertUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUser", reflect.TypeOf((*MockUsersDao)(nil).UpsertUser), user)
}
