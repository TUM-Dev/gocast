// Code generated by MockGen. DO NOT EDIT.
// Source: bookmark.go

// Package mock_dao is a generated GoMock package.
package mock_dao

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/joschahenningsen/TUM-Live/model"
)

// MockBookmarkDao is a mock of BookmarkDao interface.
type MockBookmarkDao struct {
	ctrl     *gomock.Controller
	recorder *MockBookmarkDaoMockRecorder
}

// MockBookmarkDaoMockRecorder is the mock recorder for MockBookmarkDao.
type MockBookmarkDaoMockRecorder struct {
	mock *MockBookmarkDao
}

// NewMockBookmarkDao creates a new mock instance.
func NewMockBookmarkDao(ctrl *gomock.Controller) *MockBookmarkDao {
	mock := &MockBookmarkDao{ctrl: ctrl}
	mock.recorder = &MockBookmarkDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookmarkDao) EXPECT() *MockBookmarkDaoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockBookmarkDao) Add(arg0 *model.Bookmark) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockBookmarkDaoMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockBookmarkDao)(nil).Add), arg0)
}

// Delete mocks base method.
func (m *MockBookmarkDao) Delete(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBookmarkDaoMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBookmarkDao)(nil).Delete), arg0)
}

// GetByStreamID mocks base method.
func (m *MockBookmarkDao) GetByStreamID(arg0 uint) ([]model.Bookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStreamID", arg0)
	ret0, _ := ret[0].([]model.Bookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStreamID indicates an expected call of GetByStreamID.
func (mr *MockBookmarkDaoMockRecorder) GetByStreamID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStreamID", reflect.TypeOf((*MockBookmarkDao)(nil).GetByStreamID), arg0)
}

// Update mocks base method.
func (m *MockBookmarkDao) Update(arg0 *model.Bookmark) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBookmarkDaoMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBookmarkDao)(nil).Update), arg0)
}
