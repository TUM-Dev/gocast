// Code generated by MockGen. DO NOT EDIT.
// Source: file.go

// Package mock_dao is a generated GoMock package.
package mock_dao

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/TUM-Dev/gocast/model"
)

// MockFileDao is a mock of FileDao interface.
type MockFileDao struct {
	ctrl     *gomock.Controller
	recorder *MockFileDaoMockRecorder
}

// MockFileDaoMockRecorder is the mock recorder for MockFileDao.
type MockFileDaoMockRecorder struct {
	mock *MockFileDao
}

// NewMockFileDao creates a new mock instance.
func NewMockFileDao(ctrl *gomock.Controller) *MockFileDao {
	mock := &MockFileDao{ctrl: ctrl}
	mock.recorder = &MockFileDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileDao) EXPECT() *MockFileDaoMockRecorder {
	return m.recorder
}

// CountVoDFiles mocks base method.
func (m *MockFileDao) CountVoDFiles() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountVoDFiles")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountVoDFiles indicates an expected call of CountVoDFiles.
func (mr *MockFileDaoMockRecorder) CountVoDFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountVoDFiles", reflect.TypeOf((*MockFileDao)(nil).CountVoDFiles))
}

// DeleteFile mocks base method.
func (m *MockFileDao) DeleteFile(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileDaoMockRecorder) DeleteFile(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileDao)(nil).DeleteFile), id)
}

// GetFileById mocks base method.
func (m *MockFileDao) GetFileById(id string) (model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileById", id)
	ret0, _ := ret[0].(model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileById indicates an expected call of GetFileById.
func (mr *MockFileDaoMockRecorder) GetFileById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileById", reflect.TypeOf((*MockFileDao)(nil).GetFileById), id)
}

// NewFile mocks base method.
func (m *MockFileDao) NewFile(f *model.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFile", f)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewFile indicates an expected call of NewFile.
func (mr *MockFileDaoMockRecorder) NewFile(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFile", reflect.TypeOf((*MockFileDao)(nil).NewFile), f)
}

// SetThumbnail mocks base method.
func (m *MockFileDao) SetThumbnail(streamId uint, thumb model.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetThumbnail", streamId, thumb)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetThumbnail indicates an expected call of SetThumbnail.
func (mr *MockFileDaoMockRecorder) SetThumbnail(streamId, thumb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetThumbnail", reflect.TypeOf((*MockFileDao)(nil).SetThumbnail), streamId, thumb)
}

// UpdateFile mocks base method.
func (m *MockFileDao) UpdateFile(id string, f *model.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFile", id, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFile indicates an expected call of UpdateFile.
func (mr *MockFileDaoMockRecorder) UpdateFile(id, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFile", reflect.TypeOf((*MockFileDao)(nil).UpdateFile), id, f)
}
