// Code generated by MockGen. DO NOT EDIT.
// Source: runner.go

// Package mock_dao is a generated GoMock package.
package mock_dao

import (
	context "context"
	reflect "reflect"

	model "github.com/TUM-Dev/gocast/model"
	gomock "github.com/golang/mock/gomock"
)

// MockRunnerDao is a mock of RunnerDao interface.
type MockRunnerDao struct {
	ctrl     *gomock.Controller
	recorder *MockRunnerDaoMockRecorder
}

// MockRunnerDaoMockRecorder is the mock recorder for MockRunnerDao.
type MockRunnerDaoMockRecorder struct {
	mock *MockRunnerDao
}

// NewMockRunnerDao creates a new mock instance.
func NewMockRunnerDao(ctrl *gomock.Controller) *MockRunnerDao {
	mock := &MockRunnerDao{ctrl: ctrl}
	mock.recorder = &MockRunnerDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunnerDao) EXPECT() *MockRunnerDaoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRunnerDao) Create(arg0 context.Context, arg1 *model.Runner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRunnerDaoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRunnerDao)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockRunnerDao) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRunnerDaoMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRunnerDao)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockRunnerDao) Get(arg0 context.Context, arg1 string) (model.Runner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(model.Runner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRunnerDaoMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRunnerDao)(nil).Get), arg0, arg1)
}
