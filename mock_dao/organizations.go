// Code generated by MockGen. DO NOT EDIT.
// Source: organizations.go

// Package mock_dao is a generated GoMock package.
package mock_dao

import (
	context "context"
	reflect "reflect"

	model "github.com/TUM-Dev/gocast/model"
	gomock "github.com/golang/mock/gomock"
)

// MockOrganizationsDao is a mock of OrganizationsDao interface.
type MockOrganizationsDao struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationsDaoMockRecorder
}

// MockOrganizationsDaoMockRecorder is the mock recorder for MockOrganizationsDao.
type MockOrganizationsDaoMockRecorder struct {
	mock *MockOrganizationsDao
}

// NewMockOrganizationsDao creates a new mock instance.
func NewMockOrganizationsDao(ctrl *gomock.Controller) *MockOrganizationsDao {
	mock := &MockOrganizationsDao{ctrl: ctrl}
	mock.recorder = &MockOrganizationsDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationsDao) EXPECT() *MockOrganizationsDaoMockRecorder {
	return m.recorder
}

// AddAdmin mocks base method.
func (m *MockOrganizationsDao) AddAdmin(arg0 context.Context, arg1 *model.Organization, arg2 *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAdmin", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAdmin indicates an expected call of AddAdmin.
func (mr *MockOrganizationsDaoMockRecorder) AddAdmin(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAdmin", reflect.TypeOf((*MockOrganizationsDao)(nil).AddAdmin), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockOrganizationsDao) Create(arg0 context.Context, arg1 *model.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOrganizationsDaoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrganizationsDao)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockOrganizationsDao) Delete(arg0 context.Context, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOrganizationsDaoMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrganizationsDao)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockOrganizationsDao) Get(arg0 context.Context, arg1 uint) (model.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(model.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOrganizationsDaoMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOrganizationsDao)(nil).Get), arg0, arg1)
}

// GetAdminCount mocks base method.
func (m *MockOrganizationsDao) GetAdminCount(arg0 context.Context, arg1 uint) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminCount", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminCount indicates an expected call of GetAdminCount.
func (mr *MockOrganizationsDaoMockRecorder) GetAdminCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminCount", reflect.TypeOf((*MockOrganizationsDao)(nil).GetAdminCount), arg0, arg1)
}

// GetAdministeredOrganizationsByUser mocks base method.
func (m *MockOrganizationsDao) GetAdministeredOrganizationsByUser(arg0 context.Context, arg1 *model.User) ([]model.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdministeredOrganizationsByUser", arg0, arg1)
	ret0, _ := ret[0].([]model.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdministeredOrganizationsByUser indicates an expected call of GetAdministeredOrganizationsByUser.
func (mr *MockOrganizationsDaoMockRecorder) GetAdministeredOrganizationsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdministeredOrganizationsByUser", reflect.TypeOf((*MockOrganizationsDao)(nil).GetAdministeredOrganizationsByUser), arg0, arg1)
}

// GetAdmins mocks base method.
func (m *MockOrganizationsDao) GetAdmins(arg0 context.Context, arg1 uint) ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdmins", arg0, arg1)
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdmins indicates an expected call of GetAdmins.
func (mr *MockOrganizationsDaoMockRecorder) GetAdmins(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdmins", reflect.TypeOf((*MockOrganizationsDao)(nil).GetAdmins), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockOrganizationsDao) GetAll() []model.Organization {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.Organization)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockOrganizationsDaoMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockOrganizationsDao)(nil).GetAll))
}

// GetByName mocks base method.
func (m *MockOrganizationsDao) GetByName(arg0 context.Context, arg1 string) (model.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0, arg1)
	ret0, _ := ret[0].(model.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockOrganizationsDaoMockRecorder) GetByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockOrganizationsDao)(nil).GetByName), arg0, arg1)
}

// ImportOrganization mocks base method.
func (m *MockOrganizationsDao) ImportOrganization(arg0, arg1, arg2, arg3 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ImportOrganization", arg0, arg1, arg2, arg3)
}

// ImportOrganization indicates an expected call of ImportOrganization.
func (mr *MockOrganizationsDaoMockRecorder) ImportOrganization(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportOrganization", reflect.TypeOf((*MockOrganizationsDao)(nil).ImportOrganization), arg0, arg1, arg2, arg3)
}

// Query mocks base method.
func (m *MockOrganizationsDao) Query(arg0 context.Context, arg1 string) ([]model.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1)
	ret0, _ := ret[0].([]model.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockOrganizationsDaoMockRecorder) Query(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockOrganizationsDao)(nil).Query), arg0, arg1)
}

// QueryAdministerdOrganizations mocks base method.
func (m *MockOrganizationsDao) QueryAdministerdOrganizations(arg0 context.Context, arg1 *model.User, arg2 string) ([]model.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAdministerdOrganizations", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAdministerdOrganizations indicates an expected call of QueryAdministerdOrganizations.
func (mr *MockOrganizationsDaoMockRecorder) QueryAdministerdOrganizations(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAdministerdOrganizations", reflect.TypeOf((*MockOrganizationsDao)(nil).QueryAdministerdOrganizations), arg0, arg1, arg2)
}

// RemoveAdmin mocks base method.
func (m *MockOrganizationsDao) RemoveAdmin(arg0 context.Context, arg1, arg2 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAdmin", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAdmin indicates an expected call of RemoveAdmin.
func (mr *MockOrganizationsDaoMockRecorder) RemoveAdmin(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAdmin", reflect.TypeOf((*MockOrganizationsDao)(nil).RemoveAdmin), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockOrganizationsDao) Update(arg0 context.Context, arg1 *model.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOrganizationsDaoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrganizationsDao)(nil).Update), arg0, arg1)
}
