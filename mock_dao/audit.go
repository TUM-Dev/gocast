// Code generated by MockGen. DO NOT EDIT.
// Source: audit.go

// Package mock_dao is a generated GoMock package.
package mock_dao

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/joschahenningsen/TUM-Live/model"
)

// MockAuditDao is a mock of AuditDao interface.
type MockAuditDao struct {
	ctrl     *gomock.Controller
	recorder *MockAuditDaoMockRecorder
}

// MockAuditDaoMockRecorder is the mock recorder for MockAuditDao.
type MockAuditDaoMockRecorder struct {
	mock *MockAuditDao
}

// NewMockAuditDao creates a new mock instance.
func NewMockAuditDao(ctrl *gomock.Controller) *MockAuditDao {
	mock := &MockAuditDao{ctrl: ctrl}
	mock.recorder = &MockAuditDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditDao) EXPECT() *MockAuditDaoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAuditDao) Create(arg0 model.Audit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAuditDaoMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuditDao)(nil).Create), arg0)
}

// Find mocks base method.
func (m *MockAuditDao) Find(limit, offset int, types ...model.AuditType) ([]model.Audit, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{limit, offset}
	for _, a := range types {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].([]model.Audit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockAuditDaoMockRecorder) Find(limit, offset interface{}, types ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{limit, offset}, types...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockAuditDao)(nil).Find), varargs...)
}
