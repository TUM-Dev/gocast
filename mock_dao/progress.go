// Code generated by MockGen. DO NOT EDIT.
// Source: progress.go

// Package mock_dao is a generated GoMock package.
package mock_dao

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/joschahenningsen/TUM-Live/model"
)

// MockProgressDao is a mock of ProgressDao interface.
type MockProgressDao struct {
	ctrl     *gomock.Controller
	recorder *MockProgressDaoMockRecorder
}

// MockProgressDaoMockRecorder is the mock recorder for MockProgressDao.
type MockProgressDaoMockRecorder struct {
	mock *MockProgressDao
}

// NewMockProgressDao creates a new mock instance.
func NewMockProgressDao(ctrl *gomock.Controller) *MockProgressDao {
	mock := &MockProgressDao{ctrl: ctrl}
	mock.recorder = &MockProgressDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProgressDao) EXPECT() *MockProgressDaoMockRecorder {
	return m.recorder
}

// GetProgressesForUser mocks base method.
func (m *MockProgressDao) GetProgressesForUser(userID uint) ([]model.StreamProgress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProgressesForUser", userID)
	ret0, _ := ret[0].([]model.StreamProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProgressesForUser indicates an expected call of GetProgressesForUser.
func (mr *MockProgressDaoMockRecorder) GetProgressesForUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgressesForUser", reflect.TypeOf((*MockProgressDao)(nil).GetProgressesForUser), userID)
}

// LoadProgress mocks base method.
func (m *MockProgressDao) LoadProgress(userID, streamID uint) (model.StreamProgress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadProgress", userID, streamID)
	ret0, _ := ret[0].(model.StreamProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadProgress indicates an expected call of LoadProgress.
func (mr *MockProgressDaoMockRecorder) LoadProgress(userID, streamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadProgress", reflect.TypeOf((*MockProgressDao)(nil).LoadProgress), userID, streamID)
}

// SaveProgresses mocks base method.
func (m *MockProgressDao) SaveProgresses(progresses []model.StreamProgress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProgresses", progresses)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProgresses indicates an expected call of SaveProgresses.
func (mr *MockProgressDaoMockRecorder) SaveProgresses(progresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProgresses", reflect.TypeOf((*MockProgressDao)(nil).SaveProgresses), progresses)
}
