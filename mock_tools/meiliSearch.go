// Code generated by MockGen. DO NOT EDIT.
// Source: meiliSearch.go

// Package mock_tools is a generated GoMock package.
package mock_tools

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	meilisearch "github.com/meilisearch/meilisearch-go"
)

// MockMeiliSearchInterface is a mock of MeiliSearchInterface interface.
type MockMeiliSearchInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMeiliSearchInterfaceMockRecorder
}

// MockMeiliSearchInterfaceMockRecorder is the mock recorder for MockMeiliSearchInterface.
type MockMeiliSearchInterfaceMockRecorder struct {
	mock *MockMeiliSearchInterface
}

// NewMockMeiliSearchInterface creates a new mock instance.
func NewMockMeiliSearchInterface(ctrl *gomock.Controller) *MockMeiliSearchInterface {
	mock := &MockMeiliSearchInterface{ctrl: ctrl}
	mock.recorder = &MockMeiliSearchInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeiliSearchInterface) EXPECT() *MockMeiliSearchInterfaceMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockMeiliSearchInterface) Search(q string, limit int64, searchType int, courseFilter, streamFilter, subtitleFilter string) *meilisearch.MultiSearchResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", q, limit, searchType, courseFilter, streamFilter, subtitleFilter)
	ret0, _ := ret[0].(*meilisearch.MultiSearchResponse)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockMeiliSearchInterfaceMockRecorder) Search(q, limit, searchType, courseFilter, streamFilter, subtitleFilter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockMeiliSearchInterface)(nil).Search), q, limit, searchType, courseFilter, streamFilter, subtitleFilter)
}

// SearchSubtitles mocks base method.
func (m *MockMeiliSearchInterface) SearchSubtitles(q string, streamID uint) *meilisearch.SearchResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSubtitles", q, streamID)
	ret0, _ := ret[0].(*meilisearch.SearchResponse)
	return ret0
}

// SearchSubtitles indicates an expected call of SearchSubtitles.
func (mr *MockMeiliSearchInterfaceMockRecorder) SearchSubtitles(q, streamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSubtitles", reflect.TypeOf((*MockMeiliSearchInterface)(nil).SearchSubtitles), q, streamID)
}
