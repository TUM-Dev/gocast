// Code generated by MockGen. DO NOT EDIT.
// Source: cameras.go

// Package mock_tools is a generated GoMock package.
package mock_tools

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/joschahenningsen/TUM-Live/model"
)

// MockPresetUtility is a mock of PresetUtility interface.
type MockPresetUtility struct {
	ctrl     *gomock.Controller
	recorder *MockPresetUtilityMockRecorder
}

// MockPresetUtilityMockRecorder is the mock recorder for MockPresetUtility.
type MockPresetUtilityMockRecorder struct {
	mock *MockPresetUtility
}

// NewMockPresetUtility creates a new mock instance.
func NewMockPresetUtility(ctrl *gomock.Controller) *MockPresetUtility {
	mock := &MockPresetUtility{ctrl: ctrl}
	mock.recorder = &MockPresetUtilityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPresetUtility) EXPECT() *MockPresetUtilityMockRecorder {
	return m.recorder
}

// FetchCameraPresets mocks base method.
func (m *MockPresetUtility) FetchCameraPresets(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FetchCameraPresets", arg0)
}

// FetchCameraPresets indicates an expected call of FetchCameraPresets.
func (mr *MockPresetUtilityMockRecorder) FetchCameraPresets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCameraPresets", reflect.TypeOf((*MockPresetUtility)(nil).FetchCameraPresets), arg0)
}

// FetchLHPresets mocks base method.
func (m *MockPresetUtility) FetchLHPresets(arg0 model.LectureHall) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FetchLHPresets", arg0)
}

// FetchLHPresets indicates an expected call of FetchLHPresets.
func (mr *MockPresetUtilityMockRecorder) FetchLHPresets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLHPresets", reflect.TypeOf((*MockPresetUtility)(nil).FetchLHPresets), arg0)
}

// TakeSnapshot mocks base method.
func (m *MockPresetUtility) TakeSnapshot(preset model.CameraPreset) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TakeSnapshot", preset)
}

// TakeSnapshot indicates an expected call of TakeSnapshot.
func (mr *MockPresetUtilityMockRecorder) TakeSnapshot(preset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeSnapshot", reflect.TypeOf((*MockPresetUtility)(nil).TakeSnapshot), preset)
}

// UsePreset mocks base method.
func (m *MockPresetUtility) UsePreset(preset model.CameraPreset) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UsePreset", preset)
}

// UsePreset indicates an expected call of UsePreset.
func (mr *MockPresetUtilityMockRecorder) UsePreset(preset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsePreset", reflect.TypeOf((*MockPresetUtility)(nil).UsePreset), preset)
}
