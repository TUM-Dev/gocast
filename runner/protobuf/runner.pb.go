// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: runner.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LivePreviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunnerID string `protobuf:"bytes,1,opt,name=RunnerID,proto3" json:"RunnerID,omitempty"`
	HLSUrl   string `protobuf:"bytes,2,opt,name=HLSUrl,proto3" json:"HLSUrl,omitempty"`
}

func (x *LivePreviewRequest) Reset() {
	*x = LivePreviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivePreviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivePreviewRequest) ProtoMessage() {}

func (x *LivePreviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivePreviewRequest.ProtoReflect.Descriptor instead.
func (*LivePreviewRequest) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{0}
}

func (x *LivePreviewRequest) GetRunnerID() string {
	if x != nil {
		return x.RunnerID
	}
	return ""
}

func (x *LivePreviewRequest) GetHLSUrl() string {
	if x != nil {
		return x.HLSUrl
	}
	return ""
}

type LivePreviewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveThumb []byte `protobuf:"bytes,1,opt,name=LiveThumb,proto3" json:"LiveThumb,omitempty"`
}

func (x *LivePreviewResponse) Reset() {
	*x = LivePreviewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivePreviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivePreviewResponse) ProtoMessage() {}

func (x *LivePreviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivePreviewResponse.ProtoReflect.Descriptor instead.
func (*LivePreviewResponse) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{1}
}

func (x *LivePreviewResponse) GetLiveThumb() []byte {
	if x != nil {
		return x.LiveThumb
	}
	return nil
}

type DeleteSectionImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
}

func (x *DeleteSectionImageRequest) Reset() {
	*x = DeleteSectionImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSectionImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSectionImageRequest) ProtoMessage() {}

func (x *DeleteSectionImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSectionImageRequest.ProtoReflect.Descriptor instead.
func (*DeleteSectionImageRequest) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteSectionImageRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type GenerateSectionImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths []string `protobuf:"bytes,1,rep,name=Paths,proto3" json:"Paths,omitempty"`
}

func (x *GenerateSectionImageResponse) Reset() {
	*x = GenerateSectionImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateSectionImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateSectionImageResponse) ProtoMessage() {}

func (x *GenerateSectionImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateSectionImageResponse.ProtoReflect.Descriptor instead.
func (*GenerateSectionImageResponse) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{3}
}

func (x *GenerateSectionImageResponse) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

type Section struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hours   uint32 `protobuf:"varint,1,opt,name=Hours,proto3" json:"Hours,omitempty"`
	Minutes uint32 `protobuf:"varint,2,opt,name=Minutes,proto3" json:"Minutes,omitempty"`
	Seconds uint32 `protobuf:"varint,3,opt,name=Seconds,proto3" json:"Seconds,omitempty"`
}

func (x *Section) Reset() {
	*x = Section{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Section) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Section) ProtoMessage() {}

func (x *Section) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Section.ProtoReflect.Descriptor instead.
func (*Section) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{4}
}

func (x *Section) GetHours() uint32 {
	if x != nil {
		return x.Hours
	}
	return 0
}

func (x *Section) GetMinutes() uint32 {
	if x != nil {
		return x.Minutes
	}
	return 0
}

func (x *Section) GetSeconds() uint32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

type GenerateSectionImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaylistURL        string     `protobuf:"bytes,1,opt,name=PlaylistURL,proto3" json:"PlaylistURL,omitempty"`
	CourseName         string     `protobuf:"bytes,2,opt,name=CourseName,proto3" json:"CourseName,omitempty"`
	CourseYear         uint32     `protobuf:"varint,3,opt,name=CourseYear,proto3" json:"CourseYear,omitempty"`
	CourseTeachingTerm string     `protobuf:"bytes,4,opt,name=CourseTeachingTerm,proto3" json:"CourseTeachingTerm,omitempty"`
	Sections           []*Section `protobuf:"bytes,5,rep,name=Sections,proto3" json:"Sections,omitempty"`
}

func (x *GenerateSectionImageRequest) Reset() {
	*x = GenerateSectionImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateSectionImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateSectionImageRequest) ProtoMessage() {}

func (x *GenerateSectionImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateSectionImageRequest.ProtoReflect.Descriptor instead.
func (*GenerateSectionImageRequest) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{5}
}

func (x *GenerateSectionImageRequest) GetPlaylistURL() string {
	if x != nil {
		return x.PlaylistURL
	}
	return ""
}

func (x *GenerateSectionImageRequest) GetCourseName() string {
	if x != nil {
		return x.CourseName
	}
	return ""
}

func (x *GenerateSectionImageRequest) GetCourseYear() uint32 {
	if x != nil {
		return x.CourseYear
	}
	return 0
}

func (x *GenerateSectionImageRequest) GetCourseTeachingTerm() string {
	if x != nil {
		return x.CourseTeachingTerm
	}
	return ""
}

func (x *GenerateSectionImageRequest) GetSections() []*Section {
	if x != nil {
		return x.Sections
	}
	return nil
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{6}
}

func (x *Status) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type StreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stream  uint64                 `protobuf:"varint,1,opt,name=stream,proto3" json:"stream,omitempty"`
	Course  uint64                 `protobuf:"varint,2,opt,name=course,proto3" json:"course,omitempty"`
	Version string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	End     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
	Source  string                 `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *StreamRequest) Reset() {
	*x = StreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRequest) ProtoMessage() {}

func (x *StreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRequest.ProtoReflect.Descriptor instead.
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{7}
}

func (x *StreamRequest) GetStream() uint64 {
	if x != nil {
		return x.Stream
	}
	return 0
}

func (x *StreamRequest) GetCourse() uint64 {
	if x != nil {
		return x.Course
	}
	return 0
}

func (x *StreamRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *StreamRequest) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *StreamRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type StreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job string `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *StreamResponse) Reset() {
	*x = StreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamResponse) ProtoMessage() {}

func (x *StreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamResponse.ProtoReflect.Descriptor instead.
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{8}
}

func (x *StreamResponse) GetJob() string {
	if x != nil {
		return x.Job
	}
	return ""
}

type StreamEndRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID   string `protobuf:"bytes,1,opt,name=jobID,proto3" json:"jobID,omitempty"`
	KeepVod bool   `protobuf:"varint,2,opt,name=keepVod,proto3" json:"keepVod,omitempty"`
}

func (x *StreamEndRequest) Reset() {
	*x = StreamEndRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEndRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEndRequest) ProtoMessage() {}

func (x *StreamEndRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEndRequest.ProtoReflect.Descriptor instead.
func (*StreamEndRequest) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{9}
}

func (x *StreamEndRequest) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *StreamEndRequest) GetKeepVod() bool {
	if x != nil {
		return x.KeepVod
	}
	return false
}

type StreamEndResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamEndResponse) Reset() {
	*x = StreamEndResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEndResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEndResponse) ProtoMessage() {}

func (x *StreamEndResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEndResponse.ProtoReflect.Descriptor instead.
func (*StreamEndResponse) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{10}
}

type StreamInfoForUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunnerID  string `protobuf:"bytes,1,opt,name=RunnerID,proto3" json:"RunnerID,omitempty"`
	UploadKey uint32 `protobuf:"varint,2,opt,name=UploadKey,proto3" json:"UploadKey,omitempty"`
}

func (x *StreamInfoForUploadRequest) Reset() {
	*x = StreamInfoForUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamInfoForUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInfoForUploadRequest) ProtoMessage() {}

func (x *StreamInfoForUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInfoForUploadRequest.ProtoReflect.Descriptor instead.
func (*StreamInfoForUploadRequest) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{11}
}

func (x *StreamInfoForUploadRequest) GetRunnerID() string {
	if x != nil {
		return x.RunnerID
	}
	return ""
}

func (x *StreamInfoForUploadRequest) GetUploadKey() uint32 {
	if x != nil {
		return x.UploadKey
	}
	return 0
}

type StreamInfoForUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CourseSlug  string                 `protobuf:"bytes,1,opt,name=CourseSlug,proto3" json:"CourseSlug,omitempty"`
	CourseTerm  string                 `protobuf:"bytes,2,opt,name=CourseTerm,proto3" json:"CourseTerm,omitempty"`
	CourseYear  uint32                 `protobuf:"varint,3,opt,name=CourseYear,proto3" json:"CourseYear,omitempty"`
	StreamStart *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=StreamStart,proto3" json:"StreamStart,omitempty"`
	StreamEnd   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=StreamEnd,proto3" json:"StreamEnd,omitempty"`
	StreamID    uint32                 `protobuf:"varint,6,opt,name=StreamID,proto3" json:"StreamID,omitempty"`
	VideoType   string                 `protobuf:"bytes,7,opt,name=VideoType,proto3" json:"VideoType,omitempty"`
}

func (x *StreamInfoForUploadResponse) Reset() {
	*x = StreamInfoForUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamInfoForUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInfoForUploadResponse) ProtoMessage() {}

func (x *StreamInfoForUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInfoForUploadResponse.ProtoReflect.Descriptor instead.
func (*StreamInfoForUploadResponse) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{12}
}

func (x *StreamInfoForUploadResponse) GetCourseSlug() string {
	if x != nil {
		return x.CourseSlug
	}
	return ""
}

func (x *StreamInfoForUploadResponse) GetCourseTerm() string {
	if x != nil {
		return x.CourseTerm
	}
	return ""
}

func (x *StreamInfoForUploadResponse) GetCourseYear() uint32 {
	if x != nil {
		return x.CourseYear
	}
	return 0
}

func (x *StreamInfoForUploadResponse) GetStreamStart() *timestamppb.Timestamp {
	if x != nil {
		return x.StreamStart
	}
	return nil
}

func (x *StreamInfoForUploadResponse) GetStreamEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.StreamEnd
	}
	return nil
}

func (x *StreamInfoForUploadResponse) GetStreamID() uint32 {
	if x != nil {
		return x.StreamID
	}
	return 0
}

func (x *StreamInfoForUploadResponse) GetVideoType() string {
	if x != nil {
		return x.VideoType
	}
	return ""
}

type VoDUploadFinished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunnerID     string `protobuf:"bytes,1,opt,name=RunnerID,proto3" json:"RunnerID,omitempty"`
	StreamID     uint32 `protobuf:"varint,2,opt,name=StreamID,proto3" json:"StreamID,omitempty"`
	HLSUrl       string `protobuf:"bytes,3,opt,name=HLSUrl,proto3" json:"HLSUrl,omitempty"`
	SourceType   string `protobuf:"bytes,4,opt,name=SourceType,proto3" json:"SourceType,omitempty"`
	ThumbnailUrl string `protobuf:"bytes,5,opt,name=ThumbnailUrl,proto3" json:"ThumbnailUrl,omitempty"`
}

func (x *VoDUploadFinished) Reset() {
	*x = VoDUploadFinished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoDUploadFinished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoDUploadFinished) ProtoMessage() {}

func (x *VoDUploadFinished) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoDUploadFinished.ProtoReflect.Descriptor instead.
func (*VoDUploadFinished) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{13}
}

func (x *VoDUploadFinished) GetRunnerID() string {
	if x != nil {
		return x.RunnerID
	}
	return ""
}

func (x *VoDUploadFinished) GetStreamID() uint32 {
	if x != nil {
		return x.StreamID
	}
	return 0
}

func (x *VoDUploadFinished) GetHLSUrl() string {
	if x != nil {
		return x.HLSUrl
	}
	return ""
}

func (x *VoDUploadFinished) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *VoDUploadFinished) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

type SilenceResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunnerID string   `protobuf:"bytes,1,opt,name=RunnerID,proto3" json:"RunnerID,omitempty"`
	StreamID uint32   `protobuf:"varint,2,opt,name=StreamID,proto3" json:"StreamID,omitempty"`
	Starts   []uint32 `protobuf:"varint,3,rep,packed,name=starts,proto3" json:"starts,omitempty"`
	Ends     []uint32 `protobuf:"varint,4,rep,packed,name=ends,proto3" json:"ends,omitempty"`
}

func (x *SilenceResults) Reset() {
	*x = SilenceResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SilenceResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SilenceResults) ProtoMessage() {}

func (x *SilenceResults) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SilenceResults.ProtoReflect.Descriptor instead.
func (*SilenceResults) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{14}
}

func (x *SilenceResults) GetRunnerID() string {
	if x != nil {
		return x.RunnerID
	}
	return ""
}

func (x *SilenceResults) GetStreamID() uint32 {
	if x != nil {
		return x.StreamID
	}
	return 0
}

func (x *SilenceResults) GetStarts() []uint32 {
	if x != nil {
		return x.Starts
	}
	return nil
}

func (x *SilenceResults) GetEnds() []uint32 {
	if x != nil {
		return x.Ends
	}
	return nil
}

type StreamStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname   string `protobuf:"bytes,1,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	StreamID   uint32 `protobuf:"varint,2,opt,name=StreamID,proto3" json:"StreamID,omitempty"`
	CourseID   uint32 `protobuf:"varint,3,opt,name=CourseID,proto3" json:"CourseID,omitempty"`
	Version    string `protobuf:"bytes,4,opt,name=Version,proto3" json:"Version,omitempty"`
	HLSUrl     string `protobuf:"bytes,5,opt,name=HLSUrl,proto3" json:"HLSUrl,omitempty"`
	SourceType string `protobuf:"bytes,6,opt,name=SourceType,proto3" json:"SourceType,omitempty"`
}

func (x *StreamStarted) Reset() {
	*x = StreamStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamStarted) ProtoMessage() {}

func (x *StreamStarted) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamStarted.ProtoReflect.Descriptor instead.
func (*StreamStarted) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{15}
}

func (x *StreamStarted) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *StreamStarted) GetStreamID() uint32 {
	if x != nil {
		return x.StreamID
	}
	return 0
}

func (x *StreamStarted) GetCourseID() uint32 {
	if x != nil {
		return x.CourseID
	}
	return 0
}

func (x *StreamStarted) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *StreamStarted) GetHLSUrl() string {
	if x != nil {
		return x.HLSUrl
	}
	return ""
}

func (x *StreamStarted) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

type StreamEnded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunnerID string `protobuf:"bytes,1,opt,name=RunnerID,proto3" json:"RunnerID,omitempty"`
	StreamID uint32 `protobuf:"varint,2,opt,name=StreamID,proto3" json:"StreamID,omitempty"`
}

func (x *StreamEnded) Reset() {
	*x = StreamEnded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEnded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEnded) ProtoMessage() {}

func (x *StreamEnded) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEnded.ProtoReflect.Descriptor instead.
func (*StreamEnded) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{16}
}

func (x *StreamEnded) GetRunnerID() string {
	if x != nil {
		return x.RunnerID
	}
	return ""
}

func (x *StreamEnded) GetStreamID() uint32 {
	if x != nil {
		return x.StreamID
	}
	return 0
}

type ThumbnailsFinished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunnerID           string `protobuf:"bytes,1,opt,name=RunnerID,proto3" json:"RunnerID,omitempty"`
	StreamID           uint32 `protobuf:"varint,2,opt,name=StreamID,proto3" json:"StreamID,omitempty"`
	FilePath           string `protobuf:"bytes,3,opt,name=FilePath,proto3" json:"FilePath,omitempty"`
	Interval           uint32 `protobuf:"varint,4,opt,name=Interval,proto3" json:"Interval,omitempty"`
	SourceType         string `protobuf:"bytes,5,opt,name=SourceType,proto3" json:"SourceType,omitempty"`
	LargeThumbnailPath string `protobuf:"bytes,6,opt,name=LargeThumbnailPath,proto3" json:"LargeThumbnailPath,omitempty"`
}

func (x *ThumbnailsFinished) Reset() {
	*x = ThumbnailsFinished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThumbnailsFinished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThumbnailsFinished) ProtoMessage() {}

func (x *ThumbnailsFinished) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThumbnailsFinished.ProtoReflect.Descriptor instead.
func (*ThumbnailsFinished) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{17}
}

func (x *ThumbnailsFinished) GetRunnerID() string {
	if x != nil {
		return x.RunnerID
	}
	return ""
}

func (x *ThumbnailsFinished) GetStreamID() uint32 {
	if x != nil {
		return x.StreamID
	}
	return 0
}

func (x *ThumbnailsFinished) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *ThumbnailsFinished) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *ThumbnailsFinished) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *ThumbnailsFinished) GetLargeThumbnailPath() string {
	if x != nil {
		return x.LargeThumbnailPath
	}
	return ""
}

type TranscodingFailureNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunnerID string `protobuf:"bytes,1,opt,name=RunnerID,proto3" json:"RunnerID,omitempty"`
	StreamID uint32 `protobuf:"varint,2,opt,name=StreamID,proto3" json:"StreamID,omitempty"`
	Version  string `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
	FilePath string `protobuf:"bytes,4,opt,name=FilePath,proto3" json:"FilePath,omitempty"`
	Logs     string `protobuf:"bytes,5,opt,name=Logs,proto3" json:"Logs,omitempty"`
	ExitCode int64  `protobuf:"varint,6,opt,name=ExitCode,proto3" json:"ExitCode,omitempty"`
}

func (x *TranscodingFailureNotification) Reset() {
	*x = TranscodingFailureNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscodingFailureNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodingFailureNotification) ProtoMessage() {}

func (x *TranscodingFailureNotification) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodingFailureNotification.ProtoReflect.Descriptor instead.
func (*TranscodingFailureNotification) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{18}
}

func (x *TranscodingFailureNotification) GetRunnerID() string {
	if x != nil {
		return x.RunnerID
	}
	return ""
}

func (x *TranscodingFailureNotification) GetStreamID() uint32 {
	if x != nil {
		return x.StreamID
	}
	return 0
}

func (x *TranscodingFailureNotification) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *TranscodingFailureNotification) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *TranscodingFailureNotification) GetLogs() string {
	if x != nil {
		return x.Logs
	}
	return ""
}

func (x *TranscodingFailureNotification) GetExitCode() int64 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Port     int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Token    string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{19}
}

func (x *RegisterRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *RegisterRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *RegisterRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type RegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{20}
}

func (x *RegisterResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type HeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string                 `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Port     int32                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	LastSeen *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=LastSeen,proto3" json:"LastSeen,omitempty"`
	Status   string                 `protobuf:"bytes,4,opt,name=Status,proto3" json:"Status,omitempty"`
	Workload uint32                 `protobuf:"varint,5,opt,name=Workload,proto3" json:"Workload,omitempty"`
	CPU      string                 `protobuf:"bytes,6,opt,name=CPU,proto3" json:"CPU,omitempty"`
	Memory   string                 `protobuf:"bytes,7,opt,name=Memory,proto3" json:"Memory,omitempty"`
	Disk     string                 `protobuf:"bytes,8,opt,name=Disk,proto3" json:"Disk,omitempty"`
	Uptime   string                 `protobuf:"bytes,9,opt,name=Uptime,proto3" json:"Uptime,omitempty"`
	Version  string                 `protobuf:"bytes,10,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (x *HeartbeatRequest) Reset() {
	*x = HeartbeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatRequest) ProtoMessage() {}

func (x *HeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatRequest.ProtoReflect.Descriptor instead.
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{21}
}

func (x *HeartbeatRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *HeartbeatRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *HeartbeatRequest) GetLastSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

func (x *HeartbeatRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HeartbeatRequest) GetWorkload() uint32 {
	if x != nil {
		return x.Workload
	}
	return 0
}

func (x *HeartbeatRequest) GetCPU() string {
	if x != nil {
		return x.CPU
	}
	return ""
}

func (x *HeartbeatRequest) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

func (x *HeartbeatRequest) GetDisk() string {
	if x != nil {
		return x.Disk
	}
	return ""
}

func (x *HeartbeatRequest) GetUptime() string {
	if x != nil {
		return x.Uptime
	}
	return ""
}

func (x *HeartbeatRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type HeartbeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *HeartbeatResponse) Reset() {
	*x = HeartbeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatResponse) ProtoMessage() {}

func (x *HeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatResponse.ProtoReflect.Descriptor instead.
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{22}
}

func (x *HeartbeatResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type SelfStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamKey string `protobuf:"bytes,1,opt,name=streamKey,proto3" json:"streamKey,omitempty"`
}

func (x *SelfStreamRequest) Reset() {
	*x = SelfStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfStreamRequest) ProtoMessage() {}

func (x *SelfStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfStreamRequest.ProtoReflect.Descriptor instead.
func (*SelfStreamRequest) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{23}
}

func (x *SelfStreamRequest) GetStreamKey() string {
	if x != nil {
		return x.StreamKey
	}
	return ""
}

type SelfStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stream       uint64                 `protobuf:"varint,1,opt,name=stream,proto3" json:"stream,omitempty"`
	Course       uint64                 `protobuf:"varint,2,opt,name=course,proto3" json:"course,omitempty"`
	CourseYear   uint64                 `protobuf:"varint,3,opt,name=courseYear,proto3" json:"courseYear,omitempty"`
	StreamStart  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=streamStart,proto3" json:"streamStart,omitempty"`
	StreamEnd    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=streamEnd,proto3" json:"streamEnd,omitempty"`
	UploadVoD    bool                   `protobuf:"varint,6,opt,name=uploadVoD,proto3" json:"uploadVoD,omitempty"`
	IngestServer string                 `protobuf:"bytes,7,opt,name=ingestServer,proto3" json:"ingestServer,omitempty"`
	StreamName   string                 `protobuf:"bytes,8,opt,name=streamName,proto3" json:"streamName,omitempty"`
	OutURL       string                 `protobuf:"bytes,9,opt,name=outURL,proto3" json:"outURL,omitempty"`
}

func (x *SelfStreamResponse) Reset() {
	*x = SelfStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfStreamResponse) ProtoMessage() {}

func (x *SelfStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfStreamResponse.ProtoReflect.Descriptor instead.
func (*SelfStreamResponse) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{24}
}

func (x *SelfStreamResponse) GetStream() uint64 {
	if x != nil {
		return x.Stream
	}
	return 0
}

func (x *SelfStreamResponse) GetCourse() uint64 {
	if x != nil {
		return x.Course
	}
	return 0
}

func (x *SelfStreamResponse) GetCourseYear() uint64 {
	if x != nil {
		return x.CourseYear
	}
	return 0
}

func (x *SelfStreamResponse) GetStreamStart() *timestamppb.Timestamp {
	if x != nil {
		return x.StreamStart
	}
	return nil
}

func (x *SelfStreamResponse) GetStreamEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.StreamEnd
	}
	return nil
}

func (x *SelfStreamResponse) GetUploadVoD() bool {
	if x != nil {
		return x.UploadVoD
	}
	return false
}

func (x *SelfStreamResponse) GetIngestServer() string {
	if x != nil {
		return x.IngestServer
	}
	return ""
}

func (x *SelfStreamResponse) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *SelfStreamResponse) GetOutURL() string {
	if x != nil {
		return x.OutURL
	}
	return ""
}

var File_runner_proto protoreflect.FileDescriptor

var file_runner_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x48, 0x0a, 0x12, 0x4c, 0x69, 0x76,
	0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x48,
	0x4c, 0x53, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x4c, 0x53,
	0x55, 0x72, 0x6c, 0x22, 0x33, 0x0a, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x69,
	0x76, 0x65, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x4c,
	0x69, 0x76, 0x65, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x22, 0x2f, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x22, 0x34, 0x0a, 0x1c, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x22,
	0x53, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x48, 0x6f,
	0x75, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x48, 0x6f, 0x75, 0x72, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x55, 0x52, 0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x59, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x54, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x54, 0x65, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x2d, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x18, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22,
	0x9f, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0x22, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x42, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x6b, 0x65, 0x65, 0x70, 0x56, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x6b, 0x65, 0x65, 0x70, 0x56, 0x6f, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56,
	0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x4b, 0x65, 0x79, 0x22, 0xaf, 0x02, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x53, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x54, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x59, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x11, 0x56, 0x6f, 0x44,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x4c, 0x53, 0x55, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x4c, 0x53, 0x55, 0x72, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55,
	0x72, 0x6c, 0x22, 0x7c, 0x0a, 0x0e, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x04, 0x65, 0x6e, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x04, 0x65, 0x6e, 0x64, 0x73,
	0x22, 0xb5, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x48, 0x4c, 0x53, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x48, 0x4c, 0x53, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x45, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x22,
	0xd4, 0x01, 0x0a, 0x12, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x54,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x22, 0xbe, 0x01, 0x0a, 0x1e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x45,
	0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x45,
	0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x57, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x22, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x22, 0x9e, 0x02, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x4c, 0x61, 0x73,
	0x74, 0x53, 0x65, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x57, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x50, 0x55, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x43, 0x50, 0x55, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44,
	0x69, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x23, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x31, 0x0a, 0x11, 0x53, 0x65,
	0x6c, 0x66, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x22, 0xd6, 0x02,
	0x0a, 0x12, 0x53, 0x65, 0x6c, 0x66, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x59, 0x65,
	0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x59, 0x65, 0x61, 0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x6f, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x6f, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x75, 0x74, 0x55, 0x52, 0x4c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x75, 0x74, 0x55, 0x52, 0x4c, 0x32, 0x98, 0x03, 0x0a, 0x08, 0x54, 0x6f, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x10, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x12, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52,
	0x0a, 0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x00, 0x12, 0x4d, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x32, 0x92, 0x06, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x12, 0x43, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a,
	0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65,
	0x6c, 0x66, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4a, 0x0a, 0x17, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x56, 0x6f, 0x44, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x6f, 0x44, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x14, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x65,
	0x64, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x18, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x1a,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x18, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12,
	0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x67, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f,
	0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x11, 0x5a, 0x0f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_runner_proto_rawDescOnce sync.Once
	file_runner_proto_rawDescData = file_runner_proto_rawDesc
)

func file_runner_proto_rawDescGZIP() []byte {
	file_runner_proto_rawDescOnce.Do(func() {
		file_runner_proto_rawDescData = protoimpl.X.CompressGZIP(file_runner_proto_rawDescData)
	})
	return file_runner_proto_rawDescData
}

var file_runner_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_runner_proto_goTypes = []any{
	(*LivePreviewRequest)(nil),             // 0: protobuf.LivePreviewRequest
	(*LivePreviewResponse)(nil),            // 1: protobuf.LivePreviewResponse
	(*DeleteSectionImageRequest)(nil),      // 2: protobuf.DeleteSectionImageRequest
	(*GenerateSectionImageResponse)(nil),   // 3: protobuf.GenerateSectionImageResponse
	(*Section)(nil),                        // 4: protobuf.Section
	(*GenerateSectionImageRequest)(nil),    // 5: protobuf.GenerateSectionImageRequest
	(*Status)(nil),                         // 6: protobuf.Status
	(*StreamRequest)(nil),                  // 7: protobuf.StreamRequest
	(*StreamResponse)(nil),                 // 8: protobuf.StreamResponse
	(*StreamEndRequest)(nil),               // 9: protobuf.StreamEndRequest
	(*StreamEndResponse)(nil),              // 10: protobuf.StreamEndResponse
	(*StreamInfoForUploadRequest)(nil),     // 11: protobuf.StreamInfoForUploadRequest
	(*StreamInfoForUploadResponse)(nil),    // 12: protobuf.StreamInfoForUploadResponse
	(*VoDUploadFinished)(nil),              // 13: protobuf.VoDUploadFinished
	(*SilenceResults)(nil),                 // 14: protobuf.SilenceResults
	(*StreamStarted)(nil),                  // 15: protobuf.StreamStarted
	(*StreamEnded)(nil),                    // 16: protobuf.StreamEnded
	(*ThumbnailsFinished)(nil),             // 17: protobuf.ThumbnailsFinished
	(*TranscodingFailureNotification)(nil), // 18: protobuf.TranscodingFailureNotification
	(*RegisterRequest)(nil),                // 19: protobuf.RegisterRequest
	(*RegisterResponse)(nil),               // 20: protobuf.RegisterResponse
	(*HeartbeatRequest)(nil),               // 21: protobuf.HeartbeatRequest
	(*HeartbeatResponse)(nil),              // 22: protobuf.HeartbeatResponse
	(*SelfStreamRequest)(nil),              // 23: protobuf.SelfStreamRequest
	(*SelfStreamResponse)(nil),             // 24: protobuf.SelfStreamResponse
	(*timestamppb.Timestamp)(nil),          // 25: google.protobuf.Timestamp
}
var file_runner_proto_depIdxs = []int32{
	4,  // 0: protobuf.GenerateSectionImageRequest.Sections:type_name -> protobuf.Section
	25, // 1: protobuf.StreamRequest.end:type_name -> google.protobuf.Timestamp
	25, // 2: protobuf.StreamInfoForUploadResponse.StreamStart:type_name -> google.protobuf.Timestamp
	25, // 3: protobuf.StreamInfoForUploadResponse.StreamEnd:type_name -> google.protobuf.Timestamp
	25, // 4: protobuf.HeartbeatRequest.LastSeen:type_name -> google.protobuf.Timestamp
	25, // 5: protobuf.SelfStreamResponse.streamStart:type_name -> google.protobuf.Timestamp
	25, // 6: protobuf.SelfStreamResponse.streamEnd:type_name -> google.protobuf.Timestamp
	7,  // 7: protobuf.ToRunner.RequestStream:input_type -> protobuf.StreamRequest
	9,  // 8: protobuf.ToRunner.RequestStreamEnd:input_type -> protobuf.StreamEndRequest
	0,  // 9: protobuf.ToRunner.GenerateLivePreview:input_type -> protobuf.LivePreviewRequest
	5,  // 10: protobuf.ToRunner.GenerateSectionImages:input_type -> protobuf.GenerateSectionImageRequest
	2,  // 11: protobuf.ToRunner.DeleteSectionImage:input_type -> protobuf.DeleteSectionImageRequest
	19, // 12: protobuf.FromRunner.Register:input_type -> protobuf.RegisterRequest
	21, // 13: protobuf.FromRunner.Heartbeat:input_type -> protobuf.HeartbeatRequest
	23, // 14: protobuf.FromRunner.RequestSelfStream:input_type -> protobuf.SelfStreamRequest
	13, // 15: protobuf.FromRunner.NotifyVoDUploadFinished:input_type -> protobuf.VoDUploadFinished
	14, // 16: protobuf.FromRunner.NotifySilenceResults:input_type -> protobuf.SilenceResults
	15, // 17: protobuf.FromRunner.NotifyStreamStarted:input_type -> protobuf.StreamStarted
	16, // 18: protobuf.FromRunner.NotifyStreamEnded:input_type -> protobuf.StreamEnded
	17, // 19: protobuf.FromRunner.NotifyThumbnailsFinished:input_type -> protobuf.ThumbnailsFinished
	18, // 20: protobuf.FromRunner.NotifyTranscodingFailure:input_type -> protobuf.TranscodingFailureNotification
	11, // 21: protobuf.FromRunner.GetStreamInfoForUpload:input_type -> protobuf.StreamInfoForUploadRequest
	8,  // 22: protobuf.ToRunner.RequestStream:output_type -> protobuf.StreamResponse
	10, // 23: protobuf.ToRunner.RequestStreamEnd:output_type -> protobuf.StreamEndResponse
	1,  // 24: protobuf.ToRunner.GenerateLivePreview:output_type -> protobuf.LivePreviewResponse
	6,  // 25: protobuf.ToRunner.GenerateSectionImages:output_type -> protobuf.Status
	6,  // 26: protobuf.ToRunner.DeleteSectionImage:output_type -> protobuf.Status
	20, // 27: protobuf.FromRunner.Register:output_type -> protobuf.RegisterResponse
	22, // 28: protobuf.FromRunner.Heartbeat:output_type -> protobuf.HeartbeatResponse
	24, // 29: protobuf.FromRunner.RequestSelfStream:output_type -> protobuf.SelfStreamResponse
	6,  // 30: protobuf.FromRunner.NotifyVoDUploadFinished:output_type -> protobuf.Status
	6,  // 31: protobuf.FromRunner.NotifySilenceResults:output_type -> protobuf.Status
	6,  // 32: protobuf.FromRunner.NotifyStreamStarted:output_type -> protobuf.Status
	6,  // 33: protobuf.FromRunner.NotifyStreamEnded:output_type -> protobuf.Status
	6,  // 34: protobuf.FromRunner.NotifyThumbnailsFinished:output_type -> protobuf.Status
	6,  // 35: protobuf.FromRunner.NotifyTranscodingFailure:output_type -> protobuf.Status
	12, // 36: protobuf.FromRunner.GetStreamInfoForUpload:output_type -> protobuf.StreamInfoForUploadResponse
	22, // [22:37] is the sub-list for method output_type
	7,  // [7:22] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_runner_proto_init() }
func file_runner_proto_init() {
	if File_runner_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_runner_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*LivePreviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*LivePreviewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteSectionImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GenerateSectionImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Section); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GenerateSectionImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*StreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*StreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*StreamEndRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*StreamEndResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*StreamInfoForUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*StreamInfoForUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*VoDUploadFinished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*SilenceResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*StreamStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*StreamEnded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ThumbnailsFinished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*TranscodingFailureNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*HeartbeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*HeartbeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*SelfStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*SelfStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_runner_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_runner_proto_goTypes,
		DependencyIndexes: file_runner_proto_depIdxs,
		MessageInfos:      file_runner_proto_msgTypes,
	}.Build()
	File_runner_proto = out.File
	file_runner_proto_rawDesc = nil
	file_runner_proto_goTypes = nil
	file_runner_proto_depIdxs = nil
}
