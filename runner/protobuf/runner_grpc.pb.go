// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: runner.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ToRunnerClient is the client API for ToRunner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToRunnerClient interface {
	// Requests a stream from a lecture hall
	RequestStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamResponse, error)
	RequestStreamEnd(ctx context.Context, in *StreamEndRequest, opts ...grpc.CallOption) (*StreamEndResponse, error)
	GenerateLivePreview(ctx context.Context, in *LivePreviewRequest, opts ...grpc.CallOption) (*LivePreviewResponse, error)
	GenerateSectionImages(ctx context.Context, in *GenerateSectionImageRequest, opts ...grpc.CallOption) (*Status, error)
	DeleteSectionImage(ctx context.Context, in *DeleteSectionImageRequest, opts ...grpc.CallOption) (*Status, error)
	RequestTranscoding(ctx context.Context, in *TranscodingRequest, opts ...grpc.CallOption) (*TranscodingResponse, error)
	RequestThumbnail(ctx context.Context, in *ThumbnailRequest, opts ...grpc.CallOption) (*ThumbnailResponse, error)
	RequestUpload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error)
}

type toRunnerClient struct {
	cc grpc.ClientConnInterface
}

func NewToRunnerClient(cc grpc.ClientConnInterface) ToRunnerClient {
	return &toRunnerClient{cc}
}

func (c *toRunnerClient) RequestStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamResponse, error) {
	out := new(StreamResponse)
	err := c.cc.Invoke(ctx, "/protobuf.ToRunner/RequestStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toRunnerClient) RequestStreamEnd(ctx context.Context, in *StreamEndRequest, opts ...grpc.CallOption) (*StreamEndResponse, error) {
	out := new(StreamEndResponse)
	err := c.cc.Invoke(ctx, "/protobuf.ToRunner/RequestStreamEnd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toRunnerClient) GenerateLivePreview(ctx context.Context, in *LivePreviewRequest, opts ...grpc.CallOption) (*LivePreviewResponse, error) {
	out := new(LivePreviewResponse)
	err := c.cc.Invoke(ctx, "/protobuf.ToRunner/GenerateLivePreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toRunnerClient) GenerateSectionImages(ctx context.Context, in *GenerateSectionImageRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.ToRunner/GenerateSectionImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toRunnerClient) DeleteSectionImage(ctx context.Context, in *DeleteSectionImageRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.ToRunner/DeleteSectionImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toRunnerClient) RequestTranscoding(ctx context.Context, in *TranscodingRequest, opts ...grpc.CallOption) (*TranscodingResponse, error) {
	out := new(TranscodingResponse)
	err := c.cc.Invoke(ctx, "/protobuf.ToRunner/RequestTranscoding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toRunnerClient) RequestThumbnail(ctx context.Context, in *ThumbnailRequest, opts ...grpc.CallOption) (*ThumbnailResponse, error) {
	out := new(ThumbnailResponse)
	err := c.cc.Invoke(ctx, "/protobuf.ToRunner/RequestThumbnail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toRunnerClient) RequestUpload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error) {
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, "/protobuf.ToRunner/RequestUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToRunnerServer is the server API for ToRunner service.
// All implementations must embed UnimplementedToRunnerServer
// for forward compatibility
type ToRunnerServer interface {
	// Requests a stream from a lecture hall
	RequestStream(context.Context, *StreamRequest) (*StreamResponse, error)
	RequestStreamEnd(context.Context, *StreamEndRequest) (*StreamEndResponse, error)
	GenerateLivePreview(context.Context, *LivePreviewRequest) (*LivePreviewResponse, error)
	GenerateSectionImages(context.Context, *GenerateSectionImageRequest) (*Status, error)
	DeleteSectionImage(context.Context, *DeleteSectionImageRequest) (*Status, error)
	RequestTranscoding(context.Context, *TranscodingRequest) (*TranscodingResponse, error)
	RequestThumbnail(context.Context, *ThumbnailRequest) (*ThumbnailResponse, error)
	RequestUpload(context.Context, *UploadRequest) (*UploadResponse, error)
	mustEmbedUnimplementedToRunnerServer()
}

// UnimplementedToRunnerServer must be embedded to have forward compatible implementations.
type UnimplementedToRunnerServer struct {
}

func (UnimplementedToRunnerServer) RequestStream(context.Context, *StreamRequest) (*StreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestStream not implemented")
}
func (UnimplementedToRunnerServer) RequestStreamEnd(context.Context, *StreamEndRequest) (*StreamEndResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestStreamEnd not implemented")
}
func (UnimplementedToRunnerServer) GenerateLivePreview(context.Context, *LivePreviewRequest) (*LivePreviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateLivePreview not implemented")
}
func (UnimplementedToRunnerServer) GenerateSectionImages(context.Context, *GenerateSectionImageRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSectionImages not implemented")
}
func (UnimplementedToRunnerServer) DeleteSectionImage(context.Context, *DeleteSectionImageRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSectionImage not implemented")
}
func (UnimplementedToRunnerServer) RequestTranscoding(context.Context, *TranscodingRequest) (*TranscodingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestTranscoding not implemented")
}
func (UnimplementedToRunnerServer) RequestThumbnail(context.Context, *ThumbnailRequest) (*ThumbnailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestThumbnail not implemented")
}
func (UnimplementedToRunnerServer) RequestUpload(context.Context, *UploadRequest) (*UploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestUpload not implemented")
}
func (UnimplementedToRunnerServer) mustEmbedUnimplementedToRunnerServer() {}

// UnsafeToRunnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToRunnerServer will
// result in compilation errors.
type UnsafeToRunnerServer interface {
	mustEmbedUnimplementedToRunnerServer()
}

func RegisterToRunnerServer(s grpc.ServiceRegistrar, srv ToRunnerServer) {
	s.RegisterService(&ToRunner_ServiceDesc, srv)
}

func _ToRunner_RequestStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToRunnerServer).RequestStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ToRunner/RequestStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToRunnerServer).RequestStream(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToRunner_RequestStreamEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamEndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToRunnerServer).RequestStreamEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ToRunner/RequestStreamEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToRunnerServer).RequestStreamEnd(ctx, req.(*StreamEndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToRunner_GenerateLivePreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivePreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToRunnerServer).GenerateLivePreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ToRunner/GenerateLivePreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToRunnerServer).GenerateLivePreview(ctx, req.(*LivePreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToRunner_GenerateSectionImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateSectionImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToRunnerServer).GenerateSectionImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ToRunner/GenerateSectionImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToRunnerServer).GenerateSectionImages(ctx, req.(*GenerateSectionImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToRunner_DeleteSectionImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSectionImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToRunnerServer).DeleteSectionImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ToRunner/DeleteSectionImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToRunnerServer).DeleteSectionImage(ctx, req.(*DeleteSectionImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToRunner_RequestTranscoding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranscodingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToRunnerServer).RequestTranscoding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ToRunner/RequestTranscoding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToRunnerServer).RequestTranscoding(ctx, req.(*TranscodingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToRunner_RequestThumbnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThumbnailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToRunnerServer).RequestThumbnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ToRunner/RequestThumbnail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToRunnerServer).RequestThumbnail(ctx, req.(*ThumbnailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToRunner_RequestUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToRunnerServer).RequestUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ToRunner/RequestUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToRunnerServer).RequestUpload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ToRunner_ServiceDesc is the grpc.ServiceDesc for ToRunner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToRunner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.ToRunner",
	HandlerType: (*ToRunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestStream",
			Handler:    _ToRunner_RequestStream_Handler,
		},
		{
			MethodName: "RequestStreamEnd",
			Handler:    _ToRunner_RequestStreamEnd_Handler,
		},
		{
			MethodName: "GenerateLivePreview",
			Handler:    _ToRunner_GenerateLivePreview_Handler,
		},
		{
			MethodName: "GenerateSectionImages",
			Handler:    _ToRunner_GenerateSectionImages_Handler,
		},
		{
			MethodName: "DeleteSectionImage",
			Handler:    _ToRunner_DeleteSectionImage_Handler,
		},
		{
			MethodName: "RequestTranscoding",
			Handler:    _ToRunner_RequestTranscoding_Handler,
		},
		{
			MethodName: "RequestThumbnail",
			Handler:    _ToRunner_RequestThumbnail_Handler,
		},
		{
			MethodName: "RequestUpload",
			Handler:    _ToRunner_RequestUpload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runner.proto",
}

// FromRunnerClient is the client API for FromRunner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FromRunnerClient interface {
	// Register is a request to the server to join the runners pool.
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	RequestSelfStream(ctx context.Context, in *SelfStreamRequest, opts ...grpc.CallOption) (*SelfStreamResponse, error)
	NotifyVoDUploadFinished(ctx context.Context, in *VoDUploadFinished, opts ...grpc.CallOption) (*Status, error)
	NotifySilenceResults(ctx context.Context, in *SilenceResults, opts ...grpc.CallOption) (*Status, error)
	NotifyStreamStarted(ctx context.Context, in *StreamStarted, opts ...grpc.CallOption) (*Status, error)
	NotifyStreamEnded(ctx context.Context, in *StreamEnded, opts ...grpc.CallOption) (*Status, error)
	NotifyThumbnailsFinished(ctx context.Context, in *ThumbnailsFinished, opts ...grpc.CallOption) (*Status, error)
	NotifyTranscodingFailure(ctx context.Context, in *TranscodingFailureNotification, opts ...grpc.CallOption) (*Status, error)
	GetStreamInfoForUpload(ctx context.Context, in *StreamInfoForUploadRequest, opts ...grpc.CallOption) (*StreamInfoForUploadResponse, error)
	NotifyActionFinished(ctx context.Context, in *ActionFinished, opts ...grpc.CallOption) (*Status, error)
}

type fromRunnerClient struct {
	cc grpc.ClientConnInterface
}

func NewFromRunnerClient(cc grpc.ClientConnInterface) FromRunnerClient {
	return &fromRunnerClient{cc}
}

func (c *fromRunnerClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/protobuf.FromRunner/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fromRunnerClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/protobuf.FromRunner/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fromRunnerClient) RequestSelfStream(ctx context.Context, in *SelfStreamRequest, opts ...grpc.CallOption) (*SelfStreamResponse, error) {
	out := new(SelfStreamResponse)
	err := c.cc.Invoke(ctx, "/protobuf.FromRunner/RequestSelfStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fromRunnerClient) NotifyVoDUploadFinished(ctx context.Context, in *VoDUploadFinished, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FromRunner/NotifyVoDUploadFinished", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fromRunnerClient) NotifySilenceResults(ctx context.Context, in *SilenceResults, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FromRunner/NotifySilenceResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fromRunnerClient) NotifyStreamStarted(ctx context.Context, in *StreamStarted, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FromRunner/NotifyStreamStarted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fromRunnerClient) NotifyStreamEnded(ctx context.Context, in *StreamEnded, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FromRunner/NotifyStreamEnded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fromRunnerClient) NotifyThumbnailsFinished(ctx context.Context, in *ThumbnailsFinished, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FromRunner/NotifyThumbnailsFinished", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fromRunnerClient) NotifyTranscodingFailure(ctx context.Context, in *TranscodingFailureNotification, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FromRunner/NotifyTranscodingFailure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fromRunnerClient) GetStreamInfoForUpload(ctx context.Context, in *StreamInfoForUploadRequest, opts ...grpc.CallOption) (*StreamInfoForUploadResponse, error) {
	out := new(StreamInfoForUploadResponse)
	err := c.cc.Invoke(ctx, "/protobuf.FromRunner/GetStreamInfoForUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fromRunnerClient) NotifyActionFinished(ctx context.Context, in *ActionFinished, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.FromRunner/NotifyActionFinished", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FromRunnerServer is the server API for FromRunner service.
// All implementations must embed UnimplementedFromRunnerServer
// for forward compatibility
type FromRunnerServer interface {
	// Register is a request to the server to join the runners pool.
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	RequestSelfStream(context.Context, *SelfStreamRequest) (*SelfStreamResponse, error)
	NotifyVoDUploadFinished(context.Context, *VoDUploadFinished) (*Status, error)
	NotifySilenceResults(context.Context, *SilenceResults) (*Status, error)
	NotifyStreamStarted(context.Context, *StreamStarted) (*Status, error)
	NotifyStreamEnded(context.Context, *StreamEnded) (*Status, error)
	NotifyThumbnailsFinished(context.Context, *ThumbnailsFinished) (*Status, error)
	NotifyTranscodingFailure(context.Context, *TranscodingFailureNotification) (*Status, error)
	GetStreamInfoForUpload(context.Context, *StreamInfoForUploadRequest) (*StreamInfoForUploadResponse, error)
	NotifyActionFinished(context.Context, *ActionFinished) (*Status, error)
	mustEmbedUnimplementedFromRunnerServer()
}

// UnimplementedFromRunnerServer must be embedded to have forward compatible implementations.
type UnimplementedFromRunnerServer struct {
}

func (UnimplementedFromRunnerServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedFromRunnerServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedFromRunnerServer) RequestSelfStream(context.Context, *SelfStreamRequest) (*SelfStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSelfStream not implemented")
}
func (UnimplementedFromRunnerServer) NotifyVoDUploadFinished(context.Context, *VoDUploadFinished) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyVoDUploadFinished not implemented")
}
func (UnimplementedFromRunnerServer) NotifySilenceResults(context.Context, *SilenceResults) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifySilenceResults not implemented")
}
func (UnimplementedFromRunnerServer) NotifyStreamStarted(context.Context, *StreamStarted) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyStreamStarted not implemented")
}
func (UnimplementedFromRunnerServer) NotifyStreamEnded(context.Context, *StreamEnded) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyStreamEnded not implemented")
}
func (UnimplementedFromRunnerServer) NotifyThumbnailsFinished(context.Context, *ThumbnailsFinished) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyThumbnailsFinished not implemented")
}
func (UnimplementedFromRunnerServer) NotifyTranscodingFailure(context.Context, *TranscodingFailureNotification) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyTranscodingFailure not implemented")
}
func (UnimplementedFromRunnerServer) GetStreamInfoForUpload(context.Context, *StreamInfoForUploadRequest) (*StreamInfoForUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamInfoForUpload not implemented")
}
func (UnimplementedFromRunnerServer) NotifyActionFinished(context.Context, *ActionFinished) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyActionFinished not implemented")
}
func (UnimplementedFromRunnerServer) mustEmbedUnimplementedFromRunnerServer() {}

// UnsafeFromRunnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FromRunnerServer will
// result in compilation errors.
type UnsafeFromRunnerServer interface {
	mustEmbedUnimplementedFromRunnerServer()
}

func RegisterFromRunnerServer(s grpc.ServiceRegistrar, srv FromRunnerServer) {
	s.RegisterService(&FromRunner_ServiceDesc, srv)
}

func _FromRunner_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FromRunnerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FromRunner/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FromRunnerServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FromRunner_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FromRunnerServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FromRunner/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FromRunnerServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FromRunner_RequestSelfStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelfStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FromRunnerServer).RequestSelfStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FromRunner/RequestSelfStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FromRunnerServer).RequestSelfStream(ctx, req.(*SelfStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FromRunner_NotifyVoDUploadFinished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoDUploadFinished)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FromRunnerServer).NotifyVoDUploadFinished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FromRunner/NotifyVoDUploadFinished",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FromRunnerServer).NotifyVoDUploadFinished(ctx, req.(*VoDUploadFinished))
	}
	return interceptor(ctx, in, info, handler)
}

func _FromRunner_NotifySilenceResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SilenceResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FromRunnerServer).NotifySilenceResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FromRunner/NotifySilenceResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FromRunnerServer).NotifySilenceResults(ctx, req.(*SilenceResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _FromRunner_NotifyStreamStarted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamStarted)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FromRunnerServer).NotifyStreamStarted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FromRunner/NotifyStreamStarted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FromRunnerServer).NotifyStreamStarted(ctx, req.(*StreamStarted))
	}
	return interceptor(ctx, in, info, handler)
}

func _FromRunner_NotifyStreamEnded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamEnded)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FromRunnerServer).NotifyStreamEnded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FromRunner/NotifyStreamEnded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FromRunnerServer).NotifyStreamEnded(ctx, req.(*StreamEnded))
	}
	return interceptor(ctx, in, info, handler)
}

func _FromRunner_NotifyThumbnailsFinished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThumbnailsFinished)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FromRunnerServer).NotifyThumbnailsFinished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FromRunner/NotifyThumbnailsFinished",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FromRunnerServer).NotifyThumbnailsFinished(ctx, req.(*ThumbnailsFinished))
	}
	return interceptor(ctx, in, info, handler)
}

func _FromRunner_NotifyTranscodingFailure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranscodingFailureNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FromRunnerServer).NotifyTranscodingFailure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FromRunner/NotifyTranscodingFailure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FromRunnerServer).NotifyTranscodingFailure(ctx, req.(*TranscodingFailureNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _FromRunner_GetStreamInfoForUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamInfoForUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FromRunnerServer).GetStreamInfoForUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FromRunner/GetStreamInfoForUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FromRunnerServer).GetStreamInfoForUpload(ctx, req.(*StreamInfoForUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FromRunner_NotifyActionFinished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionFinished)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FromRunnerServer).NotifyActionFinished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FromRunner/NotifyActionFinished",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FromRunnerServer).NotifyActionFinished(ctx, req.(*ActionFinished))
	}
	return interceptor(ctx, in, info, handler)
}

// FromRunner_ServiceDesc is the grpc.ServiceDesc for FromRunner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FromRunner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.FromRunner",
	HandlerType: (*FromRunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _FromRunner_Register_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _FromRunner_Heartbeat_Handler,
		},
		{
			MethodName: "RequestSelfStream",
			Handler:    _FromRunner_RequestSelfStream_Handler,
		},
		{
			MethodName: "NotifyVoDUploadFinished",
			Handler:    _FromRunner_NotifyVoDUploadFinished_Handler,
		},
		{
			MethodName: "NotifySilenceResults",
			Handler:    _FromRunner_NotifySilenceResults_Handler,
		},
		{
			MethodName: "NotifyStreamStarted",
			Handler:    _FromRunner_NotifyStreamStarted_Handler,
		},
		{
			MethodName: "NotifyStreamEnded",
			Handler:    _FromRunner_NotifyStreamEnded_Handler,
		},
		{
			MethodName: "NotifyThumbnailsFinished",
			Handler:    _FromRunner_NotifyThumbnailsFinished_Handler,
		},
		{
			MethodName: "NotifyTranscodingFailure",
			Handler:    _FromRunner_NotifyTranscodingFailure_Handler,
		},
		{
			MethodName: "GetStreamInfoForUpload",
			Handler:    _FromRunner_GetStreamInfoForUpload_Handler,
		},
		{
			MethodName: "NotifyActionFinished",
			Handler:    _FromRunner_NotifyActionFinished_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runner.proto",
}
