// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: runner.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ToRunnerClient is the client API for ToRunner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToRunnerClient interface {
	// Requests a stream from a lecture hall
	RequestStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamResponse, error)
	RequestStreamEnd(ctx context.Context, in *StreamEndRequest, opts ...grpc.CallOption) (*StreamEndResponse, error)
}

type toRunnerClient struct {
	cc grpc.ClientConnInterface
}

func NewToRunnerClient(cc grpc.ClientConnInterface) ToRunnerClient {
	return &toRunnerClient{cc}
}

func (c *toRunnerClient) RequestStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (*StreamResponse, error) {
	out := new(StreamResponse)
	err := c.cc.Invoke(ctx, "/protobuf.ToRunner/RequestStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toRunnerClient) RequestStreamEnd(ctx context.Context, in *StreamEndRequest, opts ...grpc.CallOption) (*StreamEndResponse, error) {
	out := new(StreamEndResponse)
	err := c.cc.Invoke(ctx, "/protobuf.ToRunner/RequestStreamEnd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToRunnerServer is the server API for ToRunner service.
// All implementations must embed UnimplementedToRunnerServer
// for forward compatibility
type ToRunnerServer interface {
	// Requests a stream from a lecture hall
	RequestStream(context.Context, *StreamRequest) (*StreamResponse, error)
	RequestStreamEnd(context.Context, *StreamEndRequest) (*StreamEndResponse, error)
	mustEmbedUnimplementedToRunnerServer()
}

// UnimplementedToRunnerServer must be embedded to have forward compatible implementations.
type UnimplementedToRunnerServer struct {
}

func (UnimplementedToRunnerServer) RequestStream(context.Context, *StreamRequest) (*StreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestStream not implemented")
}
func (UnimplementedToRunnerServer) RequestStreamEnd(context.Context, *StreamEndRequest) (*StreamEndResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestStreamEnd not implemented")
}
func (UnimplementedToRunnerServer) mustEmbedUnimplementedToRunnerServer() {}

// UnsafeToRunnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToRunnerServer will
// result in compilation errors.
type UnsafeToRunnerServer interface {
	mustEmbedUnimplementedToRunnerServer()
}

func RegisterToRunnerServer(s grpc.ServiceRegistrar, srv ToRunnerServer) {
	s.RegisterService(&ToRunner_ServiceDesc, srv)
}

func _ToRunner_RequestStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToRunnerServer).RequestStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ToRunner/RequestStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToRunnerServer).RequestStream(ctx, req.(*StreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToRunner_RequestStreamEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamEndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToRunnerServer).RequestStreamEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.ToRunner/RequestStreamEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToRunnerServer).RequestStreamEnd(ctx, req.(*StreamEndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ToRunner_ServiceDesc is the grpc.ServiceDesc for ToRunner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToRunner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.ToRunner",
	HandlerType: (*ToRunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestStream",
			Handler:    _ToRunner_RequestStream_Handler,
		},
		{
			MethodName: "RequestStreamEnd",
			Handler:    _ToRunner_RequestStreamEnd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runner.proto",
}

// FromRunnerClient is the client API for FromRunner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FromRunnerClient interface {
	// Register is a request to the server to join the runners pool.
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	RequestSelfStream(ctx context.Context, in *SelfStreamRequest, opts ...grpc.CallOption) (*SelfStreamResponse, error)
}

type fromRunnerClient struct {
	cc grpc.ClientConnInterface
}

func NewFromRunnerClient(cc grpc.ClientConnInterface) FromRunnerClient {
	return &fromRunnerClient{cc}
}

func (c *fromRunnerClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/protobuf.FromRunner/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fromRunnerClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/protobuf.FromRunner/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fromRunnerClient) RequestSelfStream(ctx context.Context, in *SelfStreamRequest, opts ...grpc.CallOption) (*SelfStreamResponse, error) {
	out := new(SelfStreamResponse)
	err := c.cc.Invoke(ctx, "/protobuf.FromRunner/RequestSelfStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FromRunnerServer is the server API for FromRunner service.
// All implementations must embed UnimplementedFromRunnerServer
// for forward compatibility
type FromRunnerServer interface {
	// Register is a request to the server to join the runners pool.
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	RequestSelfStream(context.Context, *SelfStreamRequest) (*SelfStreamResponse, error)
	mustEmbedUnimplementedFromRunnerServer()
}

// UnimplementedFromRunnerServer must be embedded to have forward compatible implementations.
type UnimplementedFromRunnerServer struct {
}

func (UnimplementedFromRunnerServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedFromRunnerServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedFromRunnerServer) RequestSelfStream(context.Context, *SelfStreamRequest) (*SelfStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSelfStream not implemented")
}
func (UnimplementedFromRunnerServer) mustEmbedUnimplementedFromRunnerServer() {}

// UnsafeFromRunnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FromRunnerServer will
// result in compilation errors.
type UnsafeFromRunnerServer interface {
	mustEmbedUnimplementedFromRunnerServer()
}

func RegisterFromRunnerServer(s grpc.ServiceRegistrar, srv FromRunnerServer) {
	s.RegisterService(&FromRunner_ServiceDesc, srv)
}

func _FromRunner_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FromRunnerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FromRunner/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FromRunnerServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FromRunner_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FromRunnerServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FromRunner/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FromRunnerServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FromRunner_RequestSelfStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelfStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FromRunnerServer).RequestSelfStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FromRunner/RequestSelfStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FromRunnerServer).RequestSelfStream(ctx, req.(*SelfStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FromRunner_ServiceDesc is the grpc.ServiceDesc for FromRunner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FromRunner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.FromRunner",
	HandlerType: (*FromRunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _FromRunner_Register_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _FromRunner_Heartbeat_Handler,
		},
		{
			MethodName: "RequestSelfStream",
			Handler:    _FromRunner_RequestSelfStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runner.proto",
}
